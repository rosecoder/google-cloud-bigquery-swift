// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/bigquery/storage/v1/table.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Schema of a table. This schema is a subset of
/// google.cloud.bigquery.v2.TableSchema containing information necessary to
/// generate valid message to write to BigQuery.
package struct Google_Cloud_Bigquery_Storage_V1_TableSchema: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Describes the fields in a table.
  package var fields: [Google_Cloud_Bigquery_Storage_V1_TableFieldSchema] = []

  package var unknownFields = SwiftProtobuf.UnknownStorage()

  package init() {}
}

/// TableFieldSchema defines a single field/column within a table schema.
package struct Google_Cloud_Bigquery_Storage_V1_TableFieldSchema: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The field name. The name must contain only letters (a-z, A-Z),
  /// numbers (0-9), or underscores (_), and must start with a letter or
  /// underscore. The maximum length is 128 characters.
  package var name: String = String()

  /// Required. The field data type.
  package var type: Google_Cloud_Bigquery_Storage_V1_TableFieldSchema.TypeEnum = .unspecified

  /// Optional. The field mode. The default value is NULLABLE.
  package var mode: Google_Cloud_Bigquery_Storage_V1_TableFieldSchema.Mode = .unspecified

  /// Optional. Describes the nested schema fields if the type property is set to
  /// STRUCT.
  package var fields: [Google_Cloud_Bigquery_Storage_V1_TableFieldSchema] = []

  /// Optional. The field description. The maximum length is 1,024 characters.
  package var description_p: String = String()

  /// Optional. Maximum length of values of this field for STRINGS or BYTES.
  ///
  /// If max_length is not specified, no maximum length constraint is imposed
  /// on this field.
  ///
  /// If type = "STRING", then max_length represents the maximum UTF-8
  /// length of strings in this field.
  ///
  /// If type = "BYTES", then max_length represents the maximum number of
  /// bytes in this field.
  ///
  /// It is invalid to set this field if type is not "STRING" or "BYTES".
  package var maxLength: Int64 = 0

  /// Optional. Precision (maximum number of total digits in base 10) and scale
  /// (maximum number of digits in the fractional part in base 10) constraints
  /// for values of this field for NUMERIC or BIGNUMERIC.
  ///
  /// It is invalid to set precision or scale if type is not "NUMERIC" or
  /// "BIGNUMERIC".
  ///
  /// If precision and scale are not specified, no value range constraint is
  /// imposed on this field insofar as values are permitted by the type.
  ///
  /// Values of this NUMERIC or BIGNUMERIC field must be in this range when:
  ///
  /// * Precision (P) and scale (S) are specified:
  ///   [-10^(P-S) + 10^(-S), 10^(P-S) - 10^(-S)]
  /// * Precision (P) is specified but not scale (and thus scale is
  ///   interpreted to be equal to zero):
  ///   [-10^P + 1, 10^P - 1].
  ///
  /// Acceptable values for precision and scale if both are specified:
  ///
  /// * If type = "NUMERIC":
  ///   1 <= precision - scale <= 29 and 0 <= scale <= 9.
  /// * If type = "BIGNUMERIC":
  ///   1 <= precision - scale <= 38 and 0 <= scale <= 38.
  ///
  /// Acceptable values for precision if only precision is specified but not
  /// scale (and thus scale is interpreted to be equal to zero):
  ///
  /// * If type = "NUMERIC": 1 <= precision <= 29.
  /// * If type = "BIGNUMERIC": 1 <= precision <= 38.
  ///
  /// If scale is specified but not precision, then it is invalid.
  package var precision: Int64 = 0

  /// Optional. See documentation for precision.
  package var scale: Int64 = 0

  /// Optional. A SQL expression to specify the [default value]
  /// (https://cloud.google.com/bigquery/docs/default-values) for this field.
  package var defaultValueExpression: String = String()

  /// Optional. The subtype of the RANGE, if the type of this field is RANGE. If
  /// the type is RANGE, this field is required. Possible values for the field
  /// element type of a RANGE include:
  /// * DATE
  /// * DATETIME
  /// * TIMESTAMP
  package var rangeElementType: Google_Cloud_Bigquery_Storage_V1_TableFieldSchema.FieldElementType {
    get {return _rangeElementType ?? Google_Cloud_Bigquery_Storage_V1_TableFieldSchema.FieldElementType()}
    set {_rangeElementType = newValue}
  }
  /// Returns true if `rangeElementType` has been explicitly set.
  package var hasRangeElementType: Bool {return self._rangeElementType != nil}
  /// Clears the value of `rangeElementType`. Subsequent reads from it will return its default value.
  package mutating func clearRangeElementType() {self._rangeElementType = nil}

  package var unknownFields = SwiftProtobuf.UnknownStorage()

  package enum TypeEnum: SwiftProtobuf.Enum, Swift.CaseIterable {
    package typealias RawValue = Int

    /// Illegal value
    case unspecified // = 0

    /// 64K, UTF8
    case string // = 1

    /// 64-bit signed
    case int64 // = 2

    /// 64-bit IEEE floating point
    case double // = 3

    /// Aggregate type
    case `struct` // = 4

    /// 64K, Binary
    case bytes // = 5

    /// 2-valued
    case bool // = 6

    /// 64-bit signed usec since UTC epoch
    case timestamp // = 7

    /// Civil date - Year, Month, Day
    case date // = 8

    /// Civil time - Hour, Minute, Second, Microseconds
    case time // = 9

    /// Combination of civil date and civil time
    case datetime // = 10

    /// Geography object
    case geography // = 11

    /// Numeric value
    case numeric // = 12

    /// BigNumeric value
    case bignumeric // = 13

    /// Interval
    case interval // = 14

    /// JSON, String
    case json // = 15

    /// RANGE
    case range // = 16
    case UNRECOGNIZED(Int)

    package init() {
      self = .unspecified
    }

    package init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .string
      case 2: self = .int64
      case 3: self = .double
      case 4: self = .struct
      case 5: self = .bytes
      case 6: self = .bool
      case 7: self = .timestamp
      case 8: self = .date
      case 9: self = .time
      case 10: self = .datetime
      case 11: self = .geography
      case 12: self = .numeric
      case 13: self = .bignumeric
      case 14: self = .interval
      case 15: self = .json
      case 16: self = .range
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    package var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .string: return 1
      case .int64: return 2
      case .double: return 3
      case .struct: return 4
      case .bytes: return 5
      case .bool: return 6
      case .timestamp: return 7
      case .date: return 8
      case .time: return 9
      case .datetime: return 10
      case .geography: return 11
      case .numeric: return 12
      case .bignumeric: return 13
      case .interval: return 14
      case .json: return 15
      case .range: return 16
      case .UNRECOGNIZED(let i): return i
      }
    }

    // The compiler won't synthesize support with the UNRECOGNIZED case.
    package static let allCases: [Google_Cloud_Bigquery_Storage_V1_TableFieldSchema.TypeEnum] = [
      .unspecified,
      .string,
      .int64,
      .double,
      .struct,
      .bytes,
      .bool,
      .timestamp,
      .date,
      .time,
      .datetime,
      .geography,
      .numeric,
      .bignumeric,
      .interval,
      .json,
      .range,
    ]

  }

  package enum Mode: SwiftProtobuf.Enum, Swift.CaseIterable {
    package typealias RawValue = Int

    /// Illegal value
    case unspecified // = 0
    case nullable // = 1
    case `required` // = 2
    case repeated // = 3
    case UNRECOGNIZED(Int)

    package init() {
      self = .unspecified
    }

    package init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .nullable
      case 2: self = .required
      case 3: self = .repeated
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    package var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .nullable: return 1
      case .required: return 2
      case .repeated: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

    // The compiler won't synthesize support with the UNRECOGNIZED case.
    package static let allCases: [Google_Cloud_Bigquery_Storage_V1_TableFieldSchema.Mode] = [
      .unspecified,
      .nullable,
      .required,
      .repeated,
    ]

  }

  /// Represents the type of a field element.
  package struct FieldElementType: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Required. The type of a field element.
    package var type: Google_Cloud_Bigquery_Storage_V1_TableFieldSchema.TypeEnum = .unspecified

    package var unknownFields = SwiftProtobuf.UnknownStorage()

    package init() {}
  }

  package init() {}

  fileprivate var _rangeElementType: Google_Cloud_Bigquery_Storage_V1_TableFieldSchema.FieldElementType? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.cloud.bigquery.storage.v1"

extension Google_Cloud_Bigquery_Storage_V1_TableSchema: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = _protobuf_package + ".TableSchema"
  package static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "fields"),
  ]

  package mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.fields) }()
      default: break
      }
    }
  }

  package func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.fields.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.fields, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: Google_Cloud_Bigquery_Storage_V1_TableSchema, rhs: Google_Cloud_Bigquery_Storage_V1_TableSchema) -> Bool {
    if lhs.fields != rhs.fields {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Bigquery_Storage_V1_TableFieldSchema: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = _protobuf_package + ".TableFieldSchema"
  package static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "type"),
    3: .same(proto: "mode"),
    4: .same(proto: "fields"),
    6: .same(proto: "description"),
    7: .standard(proto: "max_length"),
    8: .same(proto: "precision"),
    9: .same(proto: "scale"),
    10: .standard(proto: "default_value_expression"),
    11: .standard(proto: "range_element_type"),
  ]

  package mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.mode) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.fields) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 7: try { try decoder.decodeSingularInt64Field(value: &self.maxLength) }()
      case 8: try { try decoder.decodeSingularInt64Field(value: &self.precision) }()
      case 9: try { try decoder.decodeSingularInt64Field(value: &self.scale) }()
      case 10: try { try decoder.decodeSingularStringField(value: &self.defaultValueExpression) }()
      case 11: try { try decoder.decodeSingularMessageField(value: &self._rangeElementType) }()
      default: break
      }
    }
  }

  package func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if self.type != .unspecified {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 2)
    }
    if self.mode != .unspecified {
      try visitor.visitSingularEnumField(value: self.mode, fieldNumber: 3)
    }
    if !self.fields.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.fields, fieldNumber: 4)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 6)
    }
    if self.maxLength != 0 {
      try visitor.visitSingularInt64Field(value: self.maxLength, fieldNumber: 7)
    }
    if self.precision != 0 {
      try visitor.visitSingularInt64Field(value: self.precision, fieldNumber: 8)
    }
    if self.scale != 0 {
      try visitor.visitSingularInt64Field(value: self.scale, fieldNumber: 9)
    }
    if !self.defaultValueExpression.isEmpty {
      try visitor.visitSingularStringField(value: self.defaultValueExpression, fieldNumber: 10)
    }
    try { if let v = self._rangeElementType {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: Google_Cloud_Bigquery_Storage_V1_TableFieldSchema, rhs: Google_Cloud_Bigquery_Storage_V1_TableFieldSchema) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.type != rhs.type {return false}
    if lhs.mode != rhs.mode {return false}
    if lhs.fields != rhs.fields {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.maxLength != rhs.maxLength {return false}
    if lhs.precision != rhs.precision {return false}
    if lhs.scale != rhs.scale {return false}
    if lhs.defaultValueExpression != rhs.defaultValueExpression {return false}
    if lhs._rangeElementType != rhs._rangeElementType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Bigquery_Storage_V1_TableFieldSchema.TypeEnum: SwiftProtobuf._ProtoNameProviding {
  package static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "TYPE_UNSPECIFIED"),
    1: .same(proto: "STRING"),
    2: .same(proto: "INT64"),
    3: .same(proto: "DOUBLE"),
    4: .same(proto: "STRUCT"),
    5: .same(proto: "BYTES"),
    6: .same(proto: "BOOL"),
    7: .same(proto: "TIMESTAMP"),
    8: .same(proto: "DATE"),
    9: .same(proto: "TIME"),
    10: .same(proto: "DATETIME"),
    11: .same(proto: "GEOGRAPHY"),
    12: .same(proto: "NUMERIC"),
    13: .same(proto: "BIGNUMERIC"),
    14: .same(proto: "INTERVAL"),
    15: .same(proto: "JSON"),
    16: .same(proto: "RANGE"),
  ]
}

extension Google_Cloud_Bigquery_Storage_V1_TableFieldSchema.Mode: SwiftProtobuf._ProtoNameProviding {
  package static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "MODE_UNSPECIFIED"),
    1: .same(proto: "NULLABLE"),
    2: .same(proto: "REQUIRED"),
    3: .same(proto: "REPEATED"),
  ]
}

extension Google_Cloud_Bigquery_Storage_V1_TableFieldSchema.FieldElementType: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = Google_Cloud_Bigquery_Storage_V1_TableFieldSchema.protoMessageName + ".FieldElementType"
  package static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
  ]

  package mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      default: break
      }
    }
  }

  package func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.type != .unspecified {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: Google_Cloud_Bigquery_Storage_V1_TableFieldSchema.FieldElementType, rhs: Google_Cloud_Bigquery_Storage_V1_TableFieldSchema.FieldElementType) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
