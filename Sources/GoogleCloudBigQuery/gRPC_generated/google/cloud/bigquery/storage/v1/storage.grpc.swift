// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the gRPC Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/bigquery/storage/v1/storage.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/grpc/grpc-swift

import GRPCCore
import GRPCProtobuf
import SwiftProtobuf

// MARK: - google.cloud.bigquery.storage.v1.BigQueryRead

/// Namespace containing generated types for the "google.cloud.bigquery.storage.v1.BigQueryRead" service.
package enum Google_Cloud_Bigquery_Storage_V1_BigQueryRead {
    /// Service descriptor for the "google.cloud.bigquery.storage.v1.BigQueryRead" service.
    package static let descriptor = GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.bigquery.storage.v1.BigQueryRead")
    /// Namespace for method metadata.
    package enum Method {
        /// Namespace for "CreateReadSession" metadata.
        package enum CreateReadSession {
            /// Request type for "CreateReadSession".
            package typealias Input = Google_Cloud_Bigquery_Storage_V1_CreateReadSessionRequest
            /// Response type for "CreateReadSession".
            package typealias Output = Google_Cloud_Bigquery_Storage_V1_ReadSession
            /// Descriptor for "CreateReadSession".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.bigquery.storage.v1.BigQueryRead"),
                method: "CreateReadSession"
            )
        }
        /// Namespace for "ReadRows" metadata.
        package enum ReadRows {
            /// Request type for "ReadRows".
            package typealias Input = Google_Cloud_Bigquery_Storage_V1_ReadRowsRequest
            /// Response type for "ReadRows".
            package typealias Output = Google_Cloud_Bigquery_Storage_V1_ReadRowsResponse
            /// Descriptor for "ReadRows".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.bigquery.storage.v1.BigQueryRead"),
                method: "ReadRows"
            )
        }
        /// Namespace for "SplitReadStream" metadata.
        package enum SplitReadStream {
            /// Request type for "SplitReadStream".
            package typealias Input = Google_Cloud_Bigquery_Storage_V1_SplitReadStreamRequest
            /// Response type for "SplitReadStream".
            package typealias Output = Google_Cloud_Bigquery_Storage_V1_SplitReadStreamResponse
            /// Descriptor for "SplitReadStream".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.bigquery.storage.v1.BigQueryRead"),
                method: "SplitReadStream"
            )
        }
        /// Descriptors for all methods in the "google.cloud.bigquery.storage.v1.BigQueryRead" service.
        package static let descriptors: [GRPCCore.MethodDescriptor] = [
            CreateReadSession.descriptor,
            ReadRows.descriptor,
            SplitReadStream.descriptor
        ]
    }
}

extension GRPCCore.ServiceDescriptor {
    /// Service descriptor for the "google.cloud.bigquery.storage.v1.BigQueryRead" service.
    package static let google_cloud_bigquery_storage_v1_BigQueryRead = GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.bigquery.storage.v1.BigQueryRead")
}

// MARK: google.cloud.bigquery.storage.v1.BigQueryRead (client)

extension Google_Cloud_Bigquery_Storage_V1_BigQueryRead {
    /// Generated client protocol for the "google.cloud.bigquery.storage.v1.BigQueryRead" service.
    ///
    /// You don't need to implement this protocol directly, use the generated
    /// implementation, ``Client``.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > BigQuery Read API.
    /// > 
    /// > The Read API can be used to read data from BigQuery.
    package protocol ClientProtocol: Sendable {
        /// Call the "CreateReadSession" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Creates a new read session. A read session divides the contents of a
        /// > BigQuery table into one or more streams, which can then be used to read
        /// > data from the table. The read session also specifies properties of the
        /// > data to be read, such as a list of columns or a push-down filter describing
        /// > the rows to be returned.
        /// > 
        /// > A particular row can be read by at most one stream. When the caller has
        /// > reached the end of each stream in the session, then all the data in the
        /// > table has been read.
        /// > 
        /// > Data is assigned to each stream such that roughly the same number of
        /// > rows can be read from each stream. Because the server-side unit for
        /// > assigning data is collections of rows, the API does not guarantee that
        /// > each stream will return the same number or rows. Additionally, the
        /// > limits are enforced based on the number of pre-filtered rows, so some
        /// > filters can lead to lopsided assignments.
        /// > 
        /// > Read sessions automatically expire 6 hours after they are created and do
        /// > not require manual clean-up by the caller.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Bigquery_Storage_V1_CreateReadSessionRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Bigquery_Storage_V1_CreateReadSessionRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Bigquery_Storage_V1_ReadSession` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func createReadSession<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Bigquery_Storage_V1_CreateReadSessionRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Bigquery_Storage_V1_CreateReadSessionRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Bigquery_Storage_V1_ReadSession>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_Storage_V1_ReadSession>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "ReadRows" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Reads rows from the stream in the format prescribed by the ReadSession.
        /// > Each response contains one or more table rows, up to a maximum of 100 MiB
        /// > per response; read requests which attempt to read individual rows larger
        /// > than 100 MiB will fail.
        /// > 
        /// > Each request also returns a set of stream statistics reflecting the current
        /// > state of the stream.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Bigquery_Storage_V1_ReadRowsRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Bigquery_Storage_V1_ReadRowsRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Bigquery_Storage_V1_ReadRowsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func readRows<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Bigquery_Storage_V1_ReadRowsRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Bigquery_Storage_V1_ReadRowsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Bigquery_Storage_V1_ReadRowsResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Google_Cloud_Bigquery_Storage_V1_ReadRowsResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "SplitReadStream" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Splits a given `ReadStream` into two `ReadStream` objects. These
        /// > `ReadStream` objects are referred to as the primary and the residual
        /// > streams of the split. The original `ReadStream` can still be read from in
        /// > the same manner as before. Both of the returned `ReadStream` objects can
        /// > also be read from, and the rows returned by both child streams will be
        /// > the same as the rows read from the original stream.
        /// > 
        /// > Moreover, the two child streams will be allocated back-to-back in the
        /// > original `ReadStream`. Concretely, it is guaranteed that for streams
        /// > original, primary, and residual, that original[0-j] = primary[0-j] and
        /// > original[j-n] = residual[0-m] once the streams have been read to
        /// > completion.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Bigquery_Storage_V1_SplitReadStreamRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Bigquery_Storage_V1_SplitReadStreamRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Bigquery_Storage_V1_SplitReadStreamResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func splitReadStream<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Bigquery_Storage_V1_SplitReadStreamRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Bigquery_Storage_V1_SplitReadStreamRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Bigquery_Storage_V1_SplitReadStreamResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_Storage_V1_SplitReadStreamResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable
    }

    /// Generated client for the "google.cloud.bigquery.storage.v1.BigQueryRead" service.
    ///
    /// The ``Client`` provides an implementation of ``ClientProtocol`` which wraps
    /// a `GRPCCore.GRPCCClient`. The underlying `GRPCClient` provides the long-lived
    /// means of communication with the remote peer.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > BigQuery Read API.
    /// > 
    /// > The Read API can be used to read data from BigQuery.
    package struct Client: ClientProtocol {
        private let client: GRPCCore.GRPCClient

        /// Creates a new client wrapping the provided `GRPCCore.GRPCClient`.
        ///
        /// - Parameters:
        ///   - client: A `GRPCCore.GRPCClient` providing a communication channel to the service.
        package init(wrapping client: GRPCCore.GRPCClient) {
            self.client = client
        }

        /// Call the "CreateReadSession" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Creates a new read session. A read session divides the contents of a
        /// > BigQuery table into one or more streams, which can then be used to read
        /// > data from the table. The read session also specifies properties of the
        /// > data to be read, such as a list of columns or a push-down filter describing
        /// > the rows to be returned.
        /// > 
        /// > A particular row can be read by at most one stream. When the caller has
        /// > reached the end of each stream in the session, then all the data in the
        /// > table has been read.
        /// > 
        /// > Data is assigned to each stream such that roughly the same number of
        /// > rows can be read from each stream. Because the server-side unit for
        /// > assigning data is collections of rows, the API does not guarantee that
        /// > each stream will return the same number or rows. Additionally, the
        /// > limits are enforced based on the number of pre-filtered rows, so some
        /// > filters can lead to lopsided assignments.
        /// > 
        /// > Read sessions automatically expire 6 hours after they are created and do
        /// > not require manual clean-up by the caller.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Bigquery_Storage_V1_CreateReadSessionRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Bigquery_Storage_V1_CreateReadSessionRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Bigquery_Storage_V1_ReadSession` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func createReadSession<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Bigquery_Storage_V1_CreateReadSessionRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Bigquery_Storage_V1_CreateReadSessionRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Bigquery_Storage_V1_ReadSession>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_Storage_V1_ReadSession>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Bigquery_Storage_V1_BigQueryRead.Method.CreateReadSession.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "ReadRows" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Reads rows from the stream in the format prescribed by the ReadSession.
        /// > Each response contains one or more table rows, up to a maximum of 100 MiB
        /// > per response; read requests which attempt to read individual rows larger
        /// > than 100 MiB will fail.
        /// > 
        /// > Each request also returns a set of stream statistics reflecting the current
        /// > state of the stream.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Bigquery_Storage_V1_ReadRowsRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Bigquery_Storage_V1_ReadRowsRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Bigquery_Storage_V1_ReadRowsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func readRows<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Bigquery_Storage_V1_ReadRowsRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Bigquery_Storage_V1_ReadRowsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Bigquery_Storage_V1_ReadRowsResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Google_Cloud_Bigquery_Storage_V1_ReadRowsResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable {
            try await self.client.serverStreaming(
                request: request,
                descriptor: Google_Cloud_Bigquery_Storage_V1_BigQueryRead.Method.ReadRows.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "SplitReadStream" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Splits a given `ReadStream` into two `ReadStream` objects. These
        /// > `ReadStream` objects are referred to as the primary and the residual
        /// > streams of the split. The original `ReadStream` can still be read from in
        /// > the same manner as before. Both of the returned `ReadStream` objects can
        /// > also be read from, and the rows returned by both child streams will be
        /// > the same as the rows read from the original stream.
        /// > 
        /// > Moreover, the two child streams will be allocated back-to-back in the
        /// > original `ReadStream`. Concretely, it is guaranteed that for streams
        /// > original, primary, and residual, that original[0-j] = primary[0-j] and
        /// > original[j-n] = residual[0-m] once the streams have been read to
        /// > completion.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Bigquery_Storage_V1_SplitReadStreamRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Bigquery_Storage_V1_SplitReadStreamRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Bigquery_Storage_V1_SplitReadStreamResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func splitReadStream<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Bigquery_Storage_V1_SplitReadStreamRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Bigquery_Storage_V1_SplitReadStreamRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Bigquery_Storage_V1_SplitReadStreamResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_Storage_V1_SplitReadStreamResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Bigquery_Storage_V1_BigQueryRead.Method.SplitReadStream.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }
    }
}

// Helpers providing default arguments to 'ClientProtocol' methods.
extension Google_Cloud_Bigquery_Storage_V1_BigQueryRead.ClientProtocol {
    /// Call the "CreateReadSession" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Creates a new read session. A read session divides the contents of a
    /// > BigQuery table into one or more streams, which can then be used to read
    /// > data from the table. The read session also specifies properties of the
    /// > data to be read, such as a list of columns or a push-down filter describing
    /// > the rows to be returned.
    /// > 
    /// > A particular row can be read by at most one stream. When the caller has
    /// > reached the end of each stream in the session, then all the data in the
    /// > table has been read.
    /// > 
    /// > Data is assigned to each stream such that roughly the same number of
    /// > rows can be read from each stream. Because the server-side unit for
    /// > assigning data is collections of rows, the API does not guarantee that
    /// > each stream will return the same number or rows. Additionally, the
    /// > limits are enforced based on the number of pre-filtered rows, so some
    /// > filters can lead to lopsided assignments.
    /// > 
    /// > Read sessions automatically expire 6 hours after they are created and do
    /// > not require manual clean-up by the caller.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Bigquery_Storage_V1_CreateReadSessionRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func createReadSession<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Bigquery_Storage_V1_CreateReadSessionRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_Storage_V1_ReadSession>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.createReadSession(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Bigquery_Storage_V1_CreateReadSessionRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Bigquery_Storage_V1_ReadSession>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ReadRows" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Reads rows from the stream in the format prescribed by the ReadSession.
    /// > Each response contains one or more table rows, up to a maximum of 100 MiB
    /// > per response; read requests which attempt to read individual rows larger
    /// > than 100 MiB will fail.
    /// > 
    /// > Each request also returns a set of stream statistics reflecting the current
    /// > state of the stream.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Bigquery_Storage_V1_ReadRowsRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func readRows<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Bigquery_Storage_V1_ReadRowsRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Google_Cloud_Bigquery_Storage_V1_ReadRowsResponse>) async throws -> Result
    ) async throws -> Result where Result: Sendable {
        try await self.readRows(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Bigquery_Storage_V1_ReadRowsRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Bigquery_Storage_V1_ReadRowsResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "SplitReadStream" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Splits a given `ReadStream` into two `ReadStream` objects. These
    /// > `ReadStream` objects are referred to as the primary and the residual
    /// > streams of the split. The original `ReadStream` can still be read from in
    /// > the same manner as before. Both of the returned `ReadStream` objects can
    /// > also be read from, and the rows returned by both child streams will be
    /// > the same as the rows read from the original stream.
    /// > 
    /// > Moreover, the two child streams will be allocated back-to-back in the
    /// > original `ReadStream`. Concretely, it is guaranteed that for streams
    /// > original, primary, and residual, that original[0-j] = primary[0-j] and
    /// > original[j-n] = residual[0-m] once the streams have been read to
    /// > completion.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Bigquery_Storage_V1_SplitReadStreamRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func splitReadStream<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Bigquery_Storage_V1_SplitReadStreamRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_Storage_V1_SplitReadStreamResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.splitReadStream(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Bigquery_Storage_V1_SplitReadStreamRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Bigquery_Storage_V1_SplitReadStreamResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }
}

// Helpers providing sugared APIs for 'ClientProtocol' methods.
extension Google_Cloud_Bigquery_Storage_V1_BigQueryRead.ClientProtocol {
    /// Call the "CreateReadSession" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Creates a new read session. A read session divides the contents of a
    /// > BigQuery table into one or more streams, which can then be used to read
    /// > data from the table. The read session also specifies properties of the
    /// > data to be read, such as a list of columns or a push-down filter describing
    /// > the rows to be returned.
    /// > 
    /// > A particular row can be read by at most one stream. When the caller has
    /// > reached the end of each stream in the session, then all the data in the
    /// > table has been read.
    /// > 
    /// > Data is assigned to each stream such that roughly the same number of
    /// > rows can be read from each stream. Because the server-side unit for
    /// > assigning data is collections of rows, the API does not guarantee that
    /// > each stream will return the same number or rows. Additionally, the
    /// > limits are enforced based on the number of pre-filtered rows, so some
    /// > filters can lead to lopsided assignments.
    /// > 
    /// > Read sessions automatically expire 6 hours after they are created and do
    /// > not require manual clean-up by the caller.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func createReadSession<Result>(
        _ message: Google_Cloud_Bigquery_Storage_V1_CreateReadSessionRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_Storage_V1_ReadSession>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Bigquery_Storage_V1_CreateReadSessionRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.createReadSession(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ReadRows" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Reads rows from the stream in the format prescribed by the ReadSession.
    /// > Each response contains one or more table rows, up to a maximum of 100 MiB
    /// > per response; read requests which attempt to read individual rows larger
    /// > than 100 MiB will fail.
    /// > 
    /// > Each request also returns a set of stream statistics reflecting the current
    /// > state of the stream.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func readRows<Result>(
        _ message: Google_Cloud_Bigquery_Storage_V1_ReadRowsRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Google_Cloud_Bigquery_Storage_V1_ReadRowsResponse>) async throws -> Result
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Bigquery_Storage_V1_ReadRowsRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.readRows(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "SplitReadStream" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Splits a given `ReadStream` into two `ReadStream` objects. These
    /// > `ReadStream` objects are referred to as the primary and the residual
    /// > streams of the split. The original `ReadStream` can still be read from in
    /// > the same manner as before. Both of the returned `ReadStream` objects can
    /// > also be read from, and the rows returned by both child streams will be
    /// > the same as the rows read from the original stream.
    /// > 
    /// > Moreover, the two child streams will be allocated back-to-back in the
    /// > original `ReadStream`. Concretely, it is guaranteed that for streams
    /// > original, primary, and residual, that original[0-j] = primary[0-j] and
    /// > original[j-n] = residual[0-m] once the streams have been read to
    /// > completion.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func splitReadStream<Result>(
        _ message: Google_Cloud_Bigquery_Storage_V1_SplitReadStreamRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_Storage_V1_SplitReadStreamResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Bigquery_Storage_V1_SplitReadStreamRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.splitReadStream(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }
}

// MARK: - google.cloud.bigquery.storage.v1.BigQueryWrite

/// Namespace containing generated types for the "google.cloud.bigquery.storage.v1.BigQueryWrite" service.
package enum Google_Cloud_Bigquery_Storage_V1_BigQueryWrite {
    /// Service descriptor for the "google.cloud.bigquery.storage.v1.BigQueryWrite" service.
    package static let descriptor = GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.bigquery.storage.v1.BigQueryWrite")
    /// Namespace for method metadata.
    package enum Method {
        /// Namespace for "CreateWriteStream" metadata.
        package enum CreateWriteStream {
            /// Request type for "CreateWriteStream".
            package typealias Input = Google_Cloud_Bigquery_Storage_V1_CreateWriteStreamRequest
            /// Response type for "CreateWriteStream".
            package typealias Output = Google_Cloud_Bigquery_Storage_V1_WriteStream
            /// Descriptor for "CreateWriteStream".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.bigquery.storage.v1.BigQueryWrite"),
                method: "CreateWriteStream"
            )
        }
        /// Namespace for "AppendRows" metadata.
        package enum AppendRows {
            /// Request type for "AppendRows".
            package typealias Input = Google_Cloud_Bigquery_Storage_V1_AppendRowsRequest
            /// Response type for "AppendRows".
            package typealias Output = Google_Cloud_Bigquery_Storage_V1_AppendRowsResponse
            /// Descriptor for "AppendRows".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.bigquery.storage.v1.BigQueryWrite"),
                method: "AppendRows"
            )
        }
        /// Namespace for "GetWriteStream" metadata.
        package enum GetWriteStream {
            /// Request type for "GetWriteStream".
            package typealias Input = Google_Cloud_Bigquery_Storage_V1_GetWriteStreamRequest
            /// Response type for "GetWriteStream".
            package typealias Output = Google_Cloud_Bigquery_Storage_V1_WriteStream
            /// Descriptor for "GetWriteStream".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.bigquery.storage.v1.BigQueryWrite"),
                method: "GetWriteStream"
            )
        }
        /// Namespace for "FinalizeWriteStream" metadata.
        package enum FinalizeWriteStream {
            /// Request type for "FinalizeWriteStream".
            package typealias Input = Google_Cloud_Bigquery_Storage_V1_FinalizeWriteStreamRequest
            /// Response type for "FinalizeWriteStream".
            package typealias Output = Google_Cloud_Bigquery_Storage_V1_FinalizeWriteStreamResponse
            /// Descriptor for "FinalizeWriteStream".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.bigquery.storage.v1.BigQueryWrite"),
                method: "FinalizeWriteStream"
            )
        }
        /// Namespace for "BatchCommitWriteStreams" metadata.
        package enum BatchCommitWriteStreams {
            /// Request type for "BatchCommitWriteStreams".
            package typealias Input = Google_Cloud_Bigquery_Storage_V1_BatchCommitWriteStreamsRequest
            /// Response type for "BatchCommitWriteStreams".
            package typealias Output = Google_Cloud_Bigquery_Storage_V1_BatchCommitWriteStreamsResponse
            /// Descriptor for "BatchCommitWriteStreams".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.bigquery.storage.v1.BigQueryWrite"),
                method: "BatchCommitWriteStreams"
            )
        }
        /// Namespace for "FlushRows" metadata.
        package enum FlushRows {
            /// Request type for "FlushRows".
            package typealias Input = Google_Cloud_Bigquery_Storage_V1_FlushRowsRequest
            /// Response type for "FlushRows".
            package typealias Output = Google_Cloud_Bigquery_Storage_V1_FlushRowsResponse
            /// Descriptor for "FlushRows".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.bigquery.storage.v1.BigQueryWrite"),
                method: "FlushRows"
            )
        }
        /// Descriptors for all methods in the "google.cloud.bigquery.storage.v1.BigQueryWrite" service.
        package static let descriptors: [GRPCCore.MethodDescriptor] = [
            CreateWriteStream.descriptor,
            AppendRows.descriptor,
            GetWriteStream.descriptor,
            FinalizeWriteStream.descriptor,
            BatchCommitWriteStreams.descriptor,
            FlushRows.descriptor
        ]
    }
}

extension GRPCCore.ServiceDescriptor {
    /// Service descriptor for the "google.cloud.bigquery.storage.v1.BigQueryWrite" service.
    package static let google_cloud_bigquery_storage_v1_BigQueryWrite = GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.bigquery.storage.v1.BigQueryWrite")
}

// MARK: google.cloud.bigquery.storage.v1.BigQueryWrite (client)

extension Google_Cloud_Bigquery_Storage_V1_BigQueryWrite {
    /// Generated client protocol for the "google.cloud.bigquery.storage.v1.BigQueryWrite" service.
    ///
    /// You don't need to implement this protocol directly, use the generated
    /// implementation, ``Client``.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > BigQuery Write API.
    /// > 
    /// > The Write API can be used to write data to BigQuery.
    /// > 
    /// > For supplementary information about the Write API, see:
    /// > https://cloud.google.com/bigquery/docs/write-api
    package protocol ClientProtocol: Sendable {
        /// Call the "CreateWriteStream" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Creates a write stream to the given table.
        /// > Additionally, every table has a special stream named '_default'
        /// > to which data can be written. This stream doesn't need to be created using
        /// > CreateWriteStream. It is a stream that can be used simultaneously by any
        /// > number of clients. Data written to this stream is considered committed as
        /// > soon as an acknowledgement is received.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Bigquery_Storage_V1_CreateWriteStreamRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Bigquery_Storage_V1_CreateWriteStreamRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Bigquery_Storage_V1_WriteStream` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func createWriteStream<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Bigquery_Storage_V1_CreateWriteStreamRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Bigquery_Storage_V1_CreateWriteStreamRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Bigquery_Storage_V1_WriteStream>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_Storage_V1_WriteStream>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "AppendRows" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Appends data to the given stream.
        /// > 
        /// > If `offset` is specified, the `offset` is checked against the end of
        /// > stream. The server returns `OUT_OF_RANGE` in `AppendRowsResponse` if an
        /// > attempt is made to append to an offset beyond the current end of the stream
        /// > or `ALREADY_EXISTS` if user provides an `offset` that has already been
        /// > written to. User can retry with adjusted offset within the same RPC
        /// > connection. If `offset` is not specified, append happens at the end of the
        /// > stream.
        /// > 
        /// > The response contains an optional offset at which the append
        /// > happened.  No offset information will be returned for appends to a
        /// > default stream.
        /// > 
        /// > Responses are received in the same order in which requests are sent.
        /// > There will be one response for each successful inserted request.  Responses
        /// > may optionally embed error information if the originating AppendRequest was
        /// > not successfully processed.
        /// > 
        /// > The specifics of when successfully appended data is made visible to the
        /// > table are governed by the type of stream:
        /// > 
        /// > * For COMMITTED streams (which includes the default stream), data is
        /// > visible immediately upon successful append.
        /// > 
        /// > * For BUFFERED streams, data is made visible via a subsequent `FlushRows`
        /// > rpc which advances a cursor to a newer offset in the stream.
        /// > 
        /// > * For PENDING streams, data is not made visible until the stream itself is
        /// > finalized (via the `FinalizeWriteStream` rpc), and the stream is explicitly
        /// > committed via the `BatchCommitWriteStreams` rpc.
        ///
        /// - Parameters:
        ///   - request: A streaming request producing `Google_Cloud_Bigquery_Storage_V1_AppendRowsRequest` messages.
        ///   - serializer: A serializer for `Google_Cloud_Bigquery_Storage_V1_AppendRowsRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Bigquery_Storage_V1_AppendRowsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func appendRows<Result>(
            request: GRPCCore.StreamingClientRequest<Google_Cloud_Bigquery_Storage_V1_AppendRowsRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Bigquery_Storage_V1_AppendRowsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Bigquery_Storage_V1_AppendRowsResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Google_Cloud_Bigquery_Storage_V1_AppendRowsResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetWriteStream" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Gets information about a write stream.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Bigquery_Storage_V1_GetWriteStreamRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Bigquery_Storage_V1_GetWriteStreamRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Bigquery_Storage_V1_WriteStream` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getWriteStream<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Bigquery_Storage_V1_GetWriteStreamRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Bigquery_Storage_V1_GetWriteStreamRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Bigquery_Storage_V1_WriteStream>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_Storage_V1_WriteStream>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "FinalizeWriteStream" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Finalize a write stream so that no new data can be appended to the
        /// > stream. Finalize is not supported on the '_default' stream.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Bigquery_Storage_V1_FinalizeWriteStreamRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Bigquery_Storage_V1_FinalizeWriteStreamRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Bigquery_Storage_V1_FinalizeWriteStreamResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func finalizeWriteStream<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Bigquery_Storage_V1_FinalizeWriteStreamRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Bigquery_Storage_V1_FinalizeWriteStreamRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Bigquery_Storage_V1_FinalizeWriteStreamResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_Storage_V1_FinalizeWriteStreamResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "BatchCommitWriteStreams" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Atomically commits a group of `PENDING` streams that belong to the same
        /// > `parent` table.
        /// > 
        /// > Streams must be finalized before commit and cannot be committed multiple
        /// > times. Once a stream is committed, data in the stream becomes available
        /// > for read operations.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Bigquery_Storage_V1_BatchCommitWriteStreamsRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Bigquery_Storage_V1_BatchCommitWriteStreamsRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Bigquery_Storage_V1_BatchCommitWriteStreamsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func batchCommitWriteStreams<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Bigquery_Storage_V1_BatchCommitWriteStreamsRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Bigquery_Storage_V1_BatchCommitWriteStreamsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Bigquery_Storage_V1_BatchCommitWriteStreamsResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_Storage_V1_BatchCommitWriteStreamsResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "FlushRows" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Flushes rows to a BUFFERED stream.
        /// > 
        /// > If users are appending rows to BUFFERED stream, flush operation is
        /// > required in order for the rows to become available for reading. A
        /// > Flush operation flushes up to any previously flushed offset in a BUFFERED
        /// > stream, to the offset specified in the request.
        /// > 
        /// > Flush is not supported on the _default stream, since it is not BUFFERED.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Bigquery_Storage_V1_FlushRowsRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Bigquery_Storage_V1_FlushRowsRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Bigquery_Storage_V1_FlushRowsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func flushRows<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Bigquery_Storage_V1_FlushRowsRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Bigquery_Storage_V1_FlushRowsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Bigquery_Storage_V1_FlushRowsResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_Storage_V1_FlushRowsResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable
    }

    /// Generated client for the "google.cloud.bigquery.storage.v1.BigQueryWrite" service.
    ///
    /// The ``Client`` provides an implementation of ``ClientProtocol`` which wraps
    /// a `GRPCCore.GRPCCClient`. The underlying `GRPCClient` provides the long-lived
    /// means of communication with the remote peer.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > BigQuery Write API.
    /// > 
    /// > The Write API can be used to write data to BigQuery.
    /// > 
    /// > For supplementary information about the Write API, see:
    /// > https://cloud.google.com/bigquery/docs/write-api
    package struct Client: ClientProtocol {
        private let client: GRPCCore.GRPCClient

        /// Creates a new client wrapping the provided `GRPCCore.GRPCClient`.
        ///
        /// - Parameters:
        ///   - client: A `GRPCCore.GRPCClient` providing a communication channel to the service.
        package init(wrapping client: GRPCCore.GRPCClient) {
            self.client = client
        }

        /// Call the "CreateWriteStream" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Creates a write stream to the given table.
        /// > Additionally, every table has a special stream named '_default'
        /// > to which data can be written. This stream doesn't need to be created using
        /// > CreateWriteStream. It is a stream that can be used simultaneously by any
        /// > number of clients. Data written to this stream is considered committed as
        /// > soon as an acknowledgement is received.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Bigquery_Storage_V1_CreateWriteStreamRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Bigquery_Storage_V1_CreateWriteStreamRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Bigquery_Storage_V1_WriteStream` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func createWriteStream<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Bigquery_Storage_V1_CreateWriteStreamRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Bigquery_Storage_V1_CreateWriteStreamRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Bigquery_Storage_V1_WriteStream>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_Storage_V1_WriteStream>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Bigquery_Storage_V1_BigQueryWrite.Method.CreateWriteStream.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "AppendRows" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Appends data to the given stream.
        /// > 
        /// > If `offset` is specified, the `offset` is checked against the end of
        /// > stream. The server returns `OUT_OF_RANGE` in `AppendRowsResponse` if an
        /// > attempt is made to append to an offset beyond the current end of the stream
        /// > or `ALREADY_EXISTS` if user provides an `offset` that has already been
        /// > written to. User can retry with adjusted offset within the same RPC
        /// > connection. If `offset` is not specified, append happens at the end of the
        /// > stream.
        /// > 
        /// > The response contains an optional offset at which the append
        /// > happened.  No offset information will be returned for appends to a
        /// > default stream.
        /// > 
        /// > Responses are received in the same order in which requests are sent.
        /// > There will be one response for each successful inserted request.  Responses
        /// > may optionally embed error information if the originating AppendRequest was
        /// > not successfully processed.
        /// > 
        /// > The specifics of when successfully appended data is made visible to the
        /// > table are governed by the type of stream:
        /// > 
        /// > * For COMMITTED streams (which includes the default stream), data is
        /// > visible immediately upon successful append.
        /// > 
        /// > * For BUFFERED streams, data is made visible via a subsequent `FlushRows`
        /// > rpc which advances a cursor to a newer offset in the stream.
        /// > 
        /// > * For PENDING streams, data is not made visible until the stream itself is
        /// > finalized (via the `FinalizeWriteStream` rpc), and the stream is explicitly
        /// > committed via the `BatchCommitWriteStreams` rpc.
        ///
        /// - Parameters:
        ///   - request: A streaming request producing `Google_Cloud_Bigquery_Storage_V1_AppendRowsRequest` messages.
        ///   - serializer: A serializer for `Google_Cloud_Bigquery_Storage_V1_AppendRowsRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Bigquery_Storage_V1_AppendRowsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func appendRows<Result>(
            request: GRPCCore.StreamingClientRequest<Google_Cloud_Bigquery_Storage_V1_AppendRowsRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Bigquery_Storage_V1_AppendRowsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Bigquery_Storage_V1_AppendRowsResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Google_Cloud_Bigquery_Storage_V1_AppendRowsResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable {
            try await self.client.bidirectionalStreaming(
                request: request,
                descriptor: Google_Cloud_Bigquery_Storage_V1_BigQueryWrite.Method.AppendRows.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetWriteStream" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Gets information about a write stream.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Bigquery_Storage_V1_GetWriteStreamRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Bigquery_Storage_V1_GetWriteStreamRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Bigquery_Storage_V1_WriteStream` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func getWriteStream<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Bigquery_Storage_V1_GetWriteStreamRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Bigquery_Storage_V1_GetWriteStreamRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Bigquery_Storage_V1_WriteStream>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_Storage_V1_WriteStream>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Bigquery_Storage_V1_BigQueryWrite.Method.GetWriteStream.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "FinalizeWriteStream" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Finalize a write stream so that no new data can be appended to the
        /// > stream. Finalize is not supported on the '_default' stream.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Bigquery_Storage_V1_FinalizeWriteStreamRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Bigquery_Storage_V1_FinalizeWriteStreamRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Bigquery_Storage_V1_FinalizeWriteStreamResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func finalizeWriteStream<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Bigquery_Storage_V1_FinalizeWriteStreamRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Bigquery_Storage_V1_FinalizeWriteStreamRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Bigquery_Storage_V1_FinalizeWriteStreamResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_Storage_V1_FinalizeWriteStreamResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Bigquery_Storage_V1_BigQueryWrite.Method.FinalizeWriteStream.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "BatchCommitWriteStreams" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Atomically commits a group of `PENDING` streams that belong to the same
        /// > `parent` table.
        /// > 
        /// > Streams must be finalized before commit and cannot be committed multiple
        /// > times. Once a stream is committed, data in the stream becomes available
        /// > for read operations.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Bigquery_Storage_V1_BatchCommitWriteStreamsRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Bigquery_Storage_V1_BatchCommitWriteStreamsRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Bigquery_Storage_V1_BatchCommitWriteStreamsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func batchCommitWriteStreams<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Bigquery_Storage_V1_BatchCommitWriteStreamsRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Bigquery_Storage_V1_BatchCommitWriteStreamsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Bigquery_Storage_V1_BatchCommitWriteStreamsResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_Storage_V1_BatchCommitWriteStreamsResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Bigquery_Storage_V1_BigQueryWrite.Method.BatchCommitWriteStreams.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "FlushRows" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Flushes rows to a BUFFERED stream.
        /// > 
        /// > If users are appending rows to BUFFERED stream, flush operation is
        /// > required in order for the rows to become available for reading. A
        /// > Flush operation flushes up to any previously flushed offset in a BUFFERED
        /// > stream, to the offset specified in the request.
        /// > 
        /// > Flush is not supported on the _default stream, since it is not BUFFERED.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Bigquery_Storage_V1_FlushRowsRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Bigquery_Storage_V1_FlushRowsRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Bigquery_Storage_V1_FlushRowsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func flushRows<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Bigquery_Storage_V1_FlushRowsRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Bigquery_Storage_V1_FlushRowsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Bigquery_Storage_V1_FlushRowsResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_Storage_V1_FlushRowsResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Bigquery_Storage_V1_BigQueryWrite.Method.FlushRows.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }
    }
}

// Helpers providing default arguments to 'ClientProtocol' methods.
extension Google_Cloud_Bigquery_Storage_V1_BigQueryWrite.ClientProtocol {
    /// Call the "CreateWriteStream" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Creates a write stream to the given table.
    /// > Additionally, every table has a special stream named '_default'
    /// > to which data can be written. This stream doesn't need to be created using
    /// > CreateWriteStream. It is a stream that can be used simultaneously by any
    /// > number of clients. Data written to this stream is considered committed as
    /// > soon as an acknowledgement is received.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Bigquery_Storage_V1_CreateWriteStreamRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func createWriteStream<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Bigquery_Storage_V1_CreateWriteStreamRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_Storage_V1_WriteStream>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.createWriteStream(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Bigquery_Storage_V1_CreateWriteStreamRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Bigquery_Storage_V1_WriteStream>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "AppendRows" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Appends data to the given stream.
    /// > 
    /// > If `offset` is specified, the `offset` is checked against the end of
    /// > stream. The server returns `OUT_OF_RANGE` in `AppendRowsResponse` if an
    /// > attempt is made to append to an offset beyond the current end of the stream
    /// > or `ALREADY_EXISTS` if user provides an `offset` that has already been
    /// > written to. User can retry with adjusted offset within the same RPC
    /// > connection. If `offset` is not specified, append happens at the end of the
    /// > stream.
    /// > 
    /// > The response contains an optional offset at which the append
    /// > happened.  No offset information will be returned for appends to a
    /// > default stream.
    /// > 
    /// > Responses are received in the same order in which requests are sent.
    /// > There will be one response for each successful inserted request.  Responses
    /// > may optionally embed error information if the originating AppendRequest was
    /// > not successfully processed.
    /// > 
    /// > The specifics of when successfully appended data is made visible to the
    /// > table are governed by the type of stream:
    /// > 
    /// > * For COMMITTED streams (which includes the default stream), data is
    /// > visible immediately upon successful append.
    /// > 
    /// > * For BUFFERED streams, data is made visible via a subsequent `FlushRows`
    /// > rpc which advances a cursor to a newer offset in the stream.
    /// > 
    /// > * For PENDING streams, data is not made visible until the stream itself is
    /// > finalized (via the `FinalizeWriteStream` rpc), and the stream is explicitly
    /// > committed via the `BatchCommitWriteStreams` rpc.
    ///
    /// - Parameters:
    ///   - request: A streaming request producing `Google_Cloud_Bigquery_Storage_V1_AppendRowsRequest` messages.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func appendRows<Result>(
        request: GRPCCore.StreamingClientRequest<Google_Cloud_Bigquery_Storage_V1_AppendRowsRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Google_Cloud_Bigquery_Storage_V1_AppendRowsResponse>) async throws -> Result
    ) async throws -> Result where Result: Sendable {
        try await self.appendRows(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Bigquery_Storage_V1_AppendRowsRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Bigquery_Storage_V1_AppendRowsResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetWriteStream" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Gets information about a write stream.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Bigquery_Storage_V1_GetWriteStreamRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func getWriteStream<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Bigquery_Storage_V1_GetWriteStreamRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_Storage_V1_WriteStream>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getWriteStream(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Bigquery_Storage_V1_GetWriteStreamRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Bigquery_Storage_V1_WriteStream>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "FinalizeWriteStream" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Finalize a write stream so that no new data can be appended to the
    /// > stream. Finalize is not supported on the '_default' stream.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Bigquery_Storage_V1_FinalizeWriteStreamRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func finalizeWriteStream<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Bigquery_Storage_V1_FinalizeWriteStreamRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_Storage_V1_FinalizeWriteStreamResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.finalizeWriteStream(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Bigquery_Storage_V1_FinalizeWriteStreamRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Bigquery_Storage_V1_FinalizeWriteStreamResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "BatchCommitWriteStreams" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Atomically commits a group of `PENDING` streams that belong to the same
    /// > `parent` table.
    /// > 
    /// > Streams must be finalized before commit and cannot be committed multiple
    /// > times. Once a stream is committed, data in the stream becomes available
    /// > for read operations.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Bigquery_Storage_V1_BatchCommitWriteStreamsRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func batchCommitWriteStreams<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Bigquery_Storage_V1_BatchCommitWriteStreamsRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_Storage_V1_BatchCommitWriteStreamsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.batchCommitWriteStreams(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Bigquery_Storage_V1_BatchCommitWriteStreamsRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Bigquery_Storage_V1_BatchCommitWriteStreamsResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "FlushRows" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Flushes rows to a BUFFERED stream.
    /// > 
    /// > If users are appending rows to BUFFERED stream, flush operation is
    /// > required in order for the rows to become available for reading. A
    /// > Flush operation flushes up to any previously flushed offset in a BUFFERED
    /// > stream, to the offset specified in the request.
    /// > 
    /// > Flush is not supported on the _default stream, since it is not BUFFERED.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Bigquery_Storage_V1_FlushRowsRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func flushRows<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Bigquery_Storage_V1_FlushRowsRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_Storage_V1_FlushRowsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.flushRows(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Bigquery_Storage_V1_FlushRowsRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Bigquery_Storage_V1_FlushRowsResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }
}

// Helpers providing sugared APIs for 'ClientProtocol' methods.
extension Google_Cloud_Bigquery_Storage_V1_BigQueryWrite.ClientProtocol {
    /// Call the "CreateWriteStream" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Creates a write stream to the given table.
    /// > Additionally, every table has a special stream named '_default'
    /// > to which data can be written. This stream doesn't need to be created using
    /// > CreateWriteStream. It is a stream that can be used simultaneously by any
    /// > number of clients. Data written to this stream is considered committed as
    /// > soon as an acknowledgement is received.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func createWriteStream<Result>(
        _ message: Google_Cloud_Bigquery_Storage_V1_CreateWriteStreamRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_Storage_V1_WriteStream>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Bigquery_Storage_V1_CreateWriteStreamRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.createWriteStream(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "AppendRows" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Appends data to the given stream.
    /// > 
    /// > If `offset` is specified, the `offset` is checked against the end of
    /// > stream. The server returns `OUT_OF_RANGE` in `AppendRowsResponse` if an
    /// > attempt is made to append to an offset beyond the current end of the stream
    /// > or `ALREADY_EXISTS` if user provides an `offset` that has already been
    /// > written to. User can retry with adjusted offset within the same RPC
    /// > connection. If `offset` is not specified, append happens at the end of the
    /// > stream.
    /// > 
    /// > The response contains an optional offset at which the append
    /// > happened.  No offset information will be returned for appends to a
    /// > default stream.
    /// > 
    /// > Responses are received in the same order in which requests are sent.
    /// > There will be one response for each successful inserted request.  Responses
    /// > may optionally embed error information if the originating AppendRequest was
    /// > not successfully processed.
    /// > 
    /// > The specifics of when successfully appended data is made visible to the
    /// > table are governed by the type of stream:
    /// > 
    /// > * For COMMITTED streams (which includes the default stream), data is
    /// > visible immediately upon successful append.
    /// > 
    /// > * For BUFFERED streams, data is made visible via a subsequent `FlushRows`
    /// > rpc which advances a cursor to a newer offset in the stream.
    /// > 
    /// > * For PENDING streams, data is not made visible until the stream itself is
    /// > finalized (via the `FinalizeWriteStream` rpc), and the stream is explicitly
    /// > committed via the `BatchCommitWriteStreams` rpc.
    ///
    /// - Parameters:
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - producer: A closure producing request messages to send to the server. The request
    ///       stream is closed when the closure returns.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func appendRows<Result>(
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        requestProducer producer: @Sendable @escaping (GRPCCore.RPCWriter<Google_Cloud_Bigquery_Storage_V1_AppendRowsRequest>) async throws -> Void,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Google_Cloud_Bigquery_Storage_V1_AppendRowsResponse>) async throws -> Result
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.StreamingClientRequest<Google_Cloud_Bigquery_Storage_V1_AppendRowsRequest>(
            metadata: metadata,
            producer: producer
        )
        return try await self.appendRows(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetWriteStream" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Gets information about a write stream.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func getWriteStream<Result>(
        _ message: Google_Cloud_Bigquery_Storage_V1_GetWriteStreamRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_Storage_V1_WriteStream>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Bigquery_Storage_V1_GetWriteStreamRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getWriteStream(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "FinalizeWriteStream" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Finalize a write stream so that no new data can be appended to the
    /// > stream. Finalize is not supported on the '_default' stream.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func finalizeWriteStream<Result>(
        _ message: Google_Cloud_Bigquery_Storage_V1_FinalizeWriteStreamRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_Storage_V1_FinalizeWriteStreamResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Bigquery_Storage_V1_FinalizeWriteStreamRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.finalizeWriteStream(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "BatchCommitWriteStreams" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Atomically commits a group of `PENDING` streams that belong to the same
    /// > `parent` table.
    /// > 
    /// > Streams must be finalized before commit and cannot be committed multiple
    /// > times. Once a stream is committed, data in the stream becomes available
    /// > for read operations.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func batchCommitWriteStreams<Result>(
        _ message: Google_Cloud_Bigquery_Storage_V1_BatchCommitWriteStreamsRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_Storage_V1_BatchCommitWriteStreamsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Bigquery_Storage_V1_BatchCommitWriteStreamsRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.batchCommitWriteStreams(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "FlushRows" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Flushes rows to a BUFFERED stream.
    /// > 
    /// > If users are appending rows to BUFFERED stream, flush operation is
    /// > required in order for the rows to become available for reading. A
    /// > Flush operation flushes up to any previously flushed offset in a BUFFERED
    /// > stream, to the offset specified in the request.
    /// > 
    /// > Flush is not supported on the _default stream, since it is not BUFFERED.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func flushRows<Result>(
        _ message: Google_Cloud_Bigquery_Storage_V1_FlushRowsRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_Storage_V1_FlushRowsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Bigquery_Storage_V1_FlushRowsRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.flushRows(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }
}