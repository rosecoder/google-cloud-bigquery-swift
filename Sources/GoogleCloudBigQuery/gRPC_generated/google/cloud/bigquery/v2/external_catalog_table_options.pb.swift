// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/bigquery/v2/external_catalog_table_options.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Metadata about open source compatible table. The fields contained in
/// these options correspond to hive metastore's table level properties.
package struct Google_Cloud_Bigquery_V2_ExternalCatalogTableOptions: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Optional. A map of key value pairs defining the parameters and properties
  /// of the open source table. Corresponds with hive meta store table
  /// parameters. Maximum size of 4Mib.
  package var parameters: Dictionary<String,String> = [:]

  /// Optional. A storage descriptor containing information about the physical
  /// storage of this table.
  package var storageDescriptor: Google_Cloud_Bigquery_V2_StorageDescriptor {
    get {return _storageDescriptor ?? Google_Cloud_Bigquery_V2_StorageDescriptor()}
    set {_storageDescriptor = newValue}
  }
  /// Returns true if `storageDescriptor` has been explicitly set.
  package var hasStorageDescriptor: Bool {return self._storageDescriptor != nil}
  /// Clears the value of `storageDescriptor`. Subsequent reads from it will return its default value.
  package mutating func clearStorageDescriptor() {self._storageDescriptor = nil}

  /// Optional. The connection specifying the credentials to be used to read
  /// external storage, such as Azure Blob, Cloud Storage, or S3. The connection
  /// is needed to read the open source table from BigQuery Engine. The
  /// connection_id can have the form
  /// `<project_id>.<location_id>.<connection_id>` or
  /// `projects/<project_id>/locations/<location_id>/connections/<connection_id>`.
  package var connectionID: String = String()

  package var unknownFields = SwiftProtobuf.UnknownStorage()

  package init() {}

  fileprivate var _storageDescriptor: Google_Cloud_Bigquery_V2_StorageDescriptor? = nil
}

/// Contains information about how a table's data is stored and accessed by open
/// source query engines.
package struct Google_Cloud_Bigquery_V2_StorageDescriptor: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Optional. The physical location of the table
  /// (e.g. `gs://spark-dataproc-data/pangea-data/case_sensitive/` or
  /// `gs://spark-dataproc-data/pangea-data/*`).
  /// The maximum length is 2056 bytes.
  package var locationUri: String = String()

  /// Optional. Specifies the fully qualified class name of the InputFormat
  /// (e.g. "org.apache.hadoop.hive.ql.io.orc.OrcInputFormat").
  /// The maximum length is 128 characters.
  package var inputFormat: String = String()

  /// Optional. Specifies the fully qualified class name of the OutputFormat
  /// (e.g. "org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat").
  /// The maximum length is 128 characters.
  package var outputFormat: String = String()

  /// Optional. Serializer and deserializer information.
  package var serdeInfo: Google_Cloud_Bigquery_V2_SerDeInfo {
    get {return _serdeInfo ?? Google_Cloud_Bigquery_V2_SerDeInfo()}
    set {_serdeInfo = newValue}
  }
  /// Returns true if `serdeInfo` has been explicitly set.
  package var hasSerdeInfo: Bool {return self._serdeInfo != nil}
  /// Clears the value of `serdeInfo`. Subsequent reads from it will return its default value.
  package mutating func clearSerdeInfo() {self._serdeInfo = nil}

  package var unknownFields = SwiftProtobuf.UnknownStorage()

  package init() {}

  fileprivate var _serdeInfo: Google_Cloud_Bigquery_V2_SerDeInfo? = nil
}

/// Serializer and deserializer information.
package struct Google_Cloud_Bigquery_V2_SerDeInfo: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Optional. Name of the SerDe.
  /// The maximum length is 256 characters.
  package var name: String = String()

  /// Required. Specifies a fully-qualified class name of the serialization
  /// library that is responsible for the translation of data between table
  /// representation and the underlying low-level input and output format
  /// structures. The maximum length is 256 characters.
  package var serializationLibrary: String = String()

  /// Optional. Key-value pairs that define the initialization parameters for the
  /// serialization library.
  /// Maximum size 10 Kib.
  package var parameters: Dictionary<String,String> = [:]

  package var unknownFields = SwiftProtobuf.UnknownStorage()

  package init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.cloud.bigquery.v2"

extension Google_Cloud_Bigquery_V2_ExternalCatalogTableOptions: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = _protobuf_package + ".ExternalCatalogTableOptions"
  package static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parameters"),
    2: .standard(proto: "storage_descriptor"),
    3: .standard(proto: "connection_id"),
  ]

  package mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.parameters) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._storageDescriptor) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.connectionID) }()
      default: break
      }
    }
  }

  package func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.parameters.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.parameters, fieldNumber: 1)
    }
    try { if let v = self._storageDescriptor {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.connectionID.isEmpty {
      try visitor.visitSingularStringField(value: self.connectionID, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: Google_Cloud_Bigquery_V2_ExternalCatalogTableOptions, rhs: Google_Cloud_Bigquery_V2_ExternalCatalogTableOptions) -> Bool {
    if lhs.parameters != rhs.parameters {return false}
    if lhs._storageDescriptor != rhs._storageDescriptor {return false}
    if lhs.connectionID != rhs.connectionID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Bigquery_V2_StorageDescriptor: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = _protobuf_package + ".StorageDescriptor"
  package static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "location_uri"),
    2: .standard(proto: "input_format"),
    3: .standard(proto: "output_format"),
    4: .standard(proto: "serde_info"),
  ]

  package mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.locationUri) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.inputFormat) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.outputFormat) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._serdeInfo) }()
      default: break
      }
    }
  }

  package func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.locationUri.isEmpty {
      try visitor.visitSingularStringField(value: self.locationUri, fieldNumber: 1)
    }
    if !self.inputFormat.isEmpty {
      try visitor.visitSingularStringField(value: self.inputFormat, fieldNumber: 2)
    }
    if !self.outputFormat.isEmpty {
      try visitor.visitSingularStringField(value: self.outputFormat, fieldNumber: 3)
    }
    try { if let v = self._serdeInfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: Google_Cloud_Bigquery_V2_StorageDescriptor, rhs: Google_Cloud_Bigquery_V2_StorageDescriptor) -> Bool {
    if lhs.locationUri != rhs.locationUri {return false}
    if lhs.inputFormat != rhs.inputFormat {return false}
    if lhs.outputFormat != rhs.outputFormat {return false}
    if lhs._serdeInfo != rhs._serdeInfo {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Bigquery_V2_SerDeInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = _protobuf_package + ".SerDeInfo"
  package static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "serialization_library"),
    3: .same(proto: "parameters"),
  ]

  package mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.serializationLibrary) }()
      case 3: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.parameters) }()
      default: break
      }
    }
  }

  package func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.serializationLibrary.isEmpty {
      try visitor.visitSingularStringField(value: self.serializationLibrary, fieldNumber: 2)
    }
    if !self.parameters.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.parameters, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: Google_Cloud_Bigquery_V2_SerDeInfo, rhs: Google_Cloud_Bigquery_V2_SerDeInfo) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.serializationLibrary != rhs.serializationLibrary {return false}
    if lhs.parameters != rhs.parameters {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
