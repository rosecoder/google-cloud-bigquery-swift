// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/bigquery/v2/table_constraints.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Represents the primary key constraint on a table's columns.
package struct Google_Cloud_Bigquery_V2_PrimaryKey: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The columns that are composed of the primary key constraint.
  package var columns: [String] = []

  package var unknownFields = SwiftProtobuf.UnknownStorage()

  package init() {}
}

/// The pair of the foreign key column and primary key column.
package struct Google_Cloud_Bigquery_V2_ColumnReference: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The column that composes the foreign key.
  package var referencingColumn: String = String()

  /// Required. The column in the primary key that are referenced by the
  /// referencing_column.
  package var referencedColumn: String = String()

  package var unknownFields = SwiftProtobuf.UnknownStorage()

  package init() {}
}

/// Represents a foreign key constraint on a table's columns.
package struct Google_Cloud_Bigquery_V2_ForeignKey: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Optional. Set only if the foreign key constraint is named.
  package var name: String = String()

  /// Required. The table that holds the primary key and is referenced by this
  /// foreign key.
  package var referencedTable: Google_Cloud_Bigquery_V2_TableReference {
    get {return _referencedTable ?? Google_Cloud_Bigquery_V2_TableReference()}
    set {_referencedTable = newValue}
  }
  /// Returns true if `referencedTable` has been explicitly set.
  package var hasReferencedTable: Bool {return self._referencedTable != nil}
  /// Clears the value of `referencedTable`. Subsequent reads from it will return its default value.
  package mutating func clearReferencedTable() {self._referencedTable = nil}

  /// Required. The columns that compose the foreign key.
  package var columnReferences: [Google_Cloud_Bigquery_V2_ColumnReference] = []

  package var unknownFields = SwiftProtobuf.UnknownStorage()

  package init() {}

  fileprivate var _referencedTable: Google_Cloud_Bigquery_V2_TableReference? = nil
}

/// The TableConstraints defines the primary key and foreign key.
package struct Google_Cloud_Bigquery_V2_TableConstraints: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Optional. Represents a primary key constraint on a table's columns.
  /// Present only if the table has a primary key.
  /// The primary key is not enforced.
  package var primaryKey: Google_Cloud_Bigquery_V2_PrimaryKey {
    get {return _primaryKey ?? Google_Cloud_Bigquery_V2_PrimaryKey()}
    set {_primaryKey = newValue}
  }
  /// Returns true if `primaryKey` has been explicitly set.
  package var hasPrimaryKey: Bool {return self._primaryKey != nil}
  /// Clears the value of `primaryKey`. Subsequent reads from it will return its default value.
  package mutating func clearPrimaryKey() {self._primaryKey = nil}

  /// Optional. Present only if the table has a foreign key.
  /// The foreign key is not enforced.
  package var foreignKeys: [Google_Cloud_Bigquery_V2_ForeignKey] = []

  package var unknownFields = SwiftProtobuf.UnknownStorage()

  package init() {}

  fileprivate var _primaryKey: Google_Cloud_Bigquery_V2_PrimaryKey? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.cloud.bigquery.v2"

extension Google_Cloud_Bigquery_V2_PrimaryKey: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = _protobuf_package + ".PrimaryKey"
  package static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "columns"),
  ]

  package mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.columns) }()
      default: break
      }
    }
  }

  package func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.columns.isEmpty {
      try visitor.visitRepeatedStringField(value: self.columns, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: Google_Cloud_Bigquery_V2_PrimaryKey, rhs: Google_Cloud_Bigquery_V2_PrimaryKey) -> Bool {
    if lhs.columns != rhs.columns {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Bigquery_V2_ColumnReference: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = _protobuf_package + ".ColumnReference"
  package static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "referencing_column"),
    2: .standard(proto: "referenced_column"),
  ]

  package mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.referencingColumn) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.referencedColumn) }()
      default: break
      }
    }
  }

  package func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.referencingColumn.isEmpty {
      try visitor.visitSingularStringField(value: self.referencingColumn, fieldNumber: 1)
    }
    if !self.referencedColumn.isEmpty {
      try visitor.visitSingularStringField(value: self.referencedColumn, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: Google_Cloud_Bigquery_V2_ColumnReference, rhs: Google_Cloud_Bigquery_V2_ColumnReference) -> Bool {
    if lhs.referencingColumn != rhs.referencingColumn {return false}
    if lhs.referencedColumn != rhs.referencedColumn {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Bigquery_V2_ForeignKey: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = _protobuf_package + ".ForeignKey"
  package static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "referenced_table"),
    3: .standard(proto: "column_references"),
  ]

  package mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._referencedTable) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.columnReferences) }()
      default: break
      }
    }
  }

  package func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    try { if let v = self._referencedTable {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.columnReferences.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.columnReferences, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: Google_Cloud_Bigquery_V2_ForeignKey, rhs: Google_Cloud_Bigquery_V2_ForeignKey) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs._referencedTable != rhs._referencedTable {return false}
    if lhs.columnReferences != rhs.columnReferences {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Bigquery_V2_TableConstraints: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = _protobuf_package + ".TableConstraints"
  package static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "primary_key"),
    2: .standard(proto: "foreign_keys"),
  ]

  package mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._primaryKey) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.foreignKeys) }()
      default: break
      }
    }
  }

  package func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._primaryKey {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.foreignKeys.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.foreignKeys, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: Google_Cloud_Bigquery_V2_TableConstraints, rhs: Google_Cloud_Bigquery_V2_TableConstraints) -> Bool {
    if lhs._primaryKey != rhs._primaryKey {return false}
    if lhs.foreignKeys != rhs.foreignKeys {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
