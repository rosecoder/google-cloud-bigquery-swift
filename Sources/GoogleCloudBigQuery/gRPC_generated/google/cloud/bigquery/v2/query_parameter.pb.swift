// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/bigquery/v2/query_parameter.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// The type of a struct parameter.
package struct Google_Cloud_Bigquery_V2_QueryParameterStructType: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Optional. The name of this field.
  package var name: String = String()

  /// Required. The type of this field.
  package var type: Google_Cloud_Bigquery_V2_QueryParameterType {
    get {return _type ?? Google_Cloud_Bigquery_V2_QueryParameterType()}
    set {_type = newValue}
  }
  /// Returns true if `type` has been explicitly set.
  package var hasType: Bool {return self._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
  package mutating func clearType() {self._type = nil}

  /// Optional. Human-oriented description of the field.
  package var description_p: String = String()

  package var unknownFields = SwiftProtobuf.UnknownStorage()

  package init() {}

  fileprivate var _type: Google_Cloud_Bigquery_V2_QueryParameterType? = nil
}

/// The type of a query parameter.
package struct Google_Cloud_Bigquery_V2_QueryParameterType: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The top level type of this field.
  package var type: String {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  /// Optional. The type of the array's elements, if this is an array.
  package var arrayType: Google_Cloud_Bigquery_V2_QueryParameterType {
    get {return _storage._arrayType ?? Google_Cloud_Bigquery_V2_QueryParameterType()}
    set {_uniqueStorage()._arrayType = newValue}
  }
  /// Returns true if `arrayType` has been explicitly set.
  package var hasArrayType: Bool {return _storage._arrayType != nil}
  /// Clears the value of `arrayType`. Subsequent reads from it will return its default value.
  package mutating func clearArrayType() {_uniqueStorage()._arrayType = nil}

  /// Optional. The types of the fields of this struct, in order, if this is a
  /// struct.
  package var structTypes: [Google_Cloud_Bigquery_V2_QueryParameterStructType] {
    get {return _storage._structTypes}
    set {_uniqueStorage()._structTypes = newValue}
  }

  /// Optional. The element type of the range, if this is a range.
  package var rangeElementType: Google_Cloud_Bigquery_V2_QueryParameterType {
    get {return _storage._rangeElementType ?? Google_Cloud_Bigquery_V2_QueryParameterType()}
    set {_uniqueStorage()._rangeElementType = newValue}
  }
  /// Returns true if `rangeElementType` has been explicitly set.
  package var hasRangeElementType: Bool {return _storage._rangeElementType != nil}
  /// Clears the value of `rangeElementType`. Subsequent reads from it will return its default value.
  package mutating func clearRangeElementType() {_uniqueStorage()._rangeElementType = nil}

  package var unknownFields = SwiftProtobuf.UnknownStorage()

  package init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Represents the value of a range.
package struct Google_Cloud_Bigquery_V2_RangeValue: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Optional. The start value of the range. A missing value represents an
  /// unbounded start.
  package var start: Google_Cloud_Bigquery_V2_QueryParameterValue {
    get {return _storage._start ?? Google_Cloud_Bigquery_V2_QueryParameterValue()}
    set {_uniqueStorage()._start = newValue}
  }
  /// Returns true if `start` has been explicitly set.
  package var hasStart: Bool {return _storage._start != nil}
  /// Clears the value of `start`. Subsequent reads from it will return its default value.
  package mutating func clearStart() {_uniqueStorage()._start = nil}

  /// Optional. The end value of the range. A missing value represents an
  /// unbounded end.
  package var end: Google_Cloud_Bigquery_V2_QueryParameterValue {
    get {return _storage._end ?? Google_Cloud_Bigquery_V2_QueryParameterValue()}
    set {_uniqueStorage()._end = newValue}
  }
  /// Returns true if `end` has been explicitly set.
  package var hasEnd: Bool {return _storage._end != nil}
  /// Clears the value of `end`. Subsequent reads from it will return its default value.
  package mutating func clearEnd() {_uniqueStorage()._end = nil}

  package var unknownFields = SwiftProtobuf.UnknownStorage()

  package init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// The value of a query parameter.
package struct Google_Cloud_Bigquery_V2_QueryParameterValue: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Optional. The value of this value, if a simple scalar type.
  package var value: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _storage._value ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_uniqueStorage()._value = newValue}
  }
  /// Returns true if `value` has been explicitly set.
  package var hasValue: Bool {return _storage._value != nil}
  /// Clears the value of `value`. Subsequent reads from it will return its default value.
  package mutating func clearValue() {_uniqueStorage()._value = nil}

  /// Optional. The array values, if this is an array type.
  package var arrayValues: [Google_Cloud_Bigquery_V2_QueryParameterValue] {
    get {return _storage._arrayValues}
    set {_uniqueStorage()._arrayValues = newValue}
  }

  /// The struct field values.
  package var structValues: Dictionary<String,Google_Cloud_Bigquery_V2_QueryParameterValue> {
    get {return _storage._structValues}
    set {_uniqueStorage()._structValues = newValue}
  }

  /// Optional. The range value, if this is a range type.
  package var rangeValue: Google_Cloud_Bigquery_V2_RangeValue {
    get {return _storage._rangeValue ?? Google_Cloud_Bigquery_V2_RangeValue()}
    set {_uniqueStorage()._rangeValue = newValue}
  }
  /// Returns true if `rangeValue` has been explicitly set.
  package var hasRangeValue: Bool {return _storage._rangeValue != nil}
  /// Clears the value of `rangeValue`. Subsequent reads from it will return its default value.
  package mutating func clearRangeValue() {_uniqueStorage()._rangeValue = nil}

  /// This field should not be used.
  package var altStructValues: [SwiftProtobuf.Google_Protobuf_Value] {
    get {return _storage._altStructValues}
    set {_uniqueStorage()._altStructValues = newValue}
  }

  package var unknownFields = SwiftProtobuf.UnknownStorage()

  package init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// A parameter given to a query.
package struct Google_Cloud_Bigquery_V2_QueryParameter: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Optional. If unset, this is a positional parameter. Otherwise, should be
  /// unique within a query.
  package var name: String = String()

  /// Required. The type of this parameter.
  package var parameterType: Google_Cloud_Bigquery_V2_QueryParameterType {
    get {return _parameterType ?? Google_Cloud_Bigquery_V2_QueryParameterType()}
    set {_parameterType = newValue}
  }
  /// Returns true if `parameterType` has been explicitly set.
  package var hasParameterType: Bool {return self._parameterType != nil}
  /// Clears the value of `parameterType`. Subsequent reads from it will return its default value.
  package mutating func clearParameterType() {self._parameterType = nil}

  /// Required. The value of this parameter.
  package var parameterValue: Google_Cloud_Bigquery_V2_QueryParameterValue {
    get {return _parameterValue ?? Google_Cloud_Bigquery_V2_QueryParameterValue()}
    set {_parameterValue = newValue}
  }
  /// Returns true if `parameterValue` has been explicitly set.
  package var hasParameterValue: Bool {return self._parameterValue != nil}
  /// Clears the value of `parameterValue`. Subsequent reads from it will return its default value.
  package mutating func clearParameterValue() {self._parameterValue = nil}

  package var unknownFields = SwiftProtobuf.UnknownStorage()

  package init() {}

  fileprivate var _parameterType: Google_Cloud_Bigquery_V2_QueryParameterType? = nil
  fileprivate var _parameterValue: Google_Cloud_Bigquery_V2_QueryParameterValue? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.cloud.bigquery.v2"

extension Google_Cloud_Bigquery_V2_QueryParameterStructType: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = _protobuf_package + ".QueryParameterStructType"
  package static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "type"),
    3: .same(proto: "description"),
  ]

  package mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._type) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      default: break
      }
    }
  }

  package func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    try { if let v = self._type {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: Google_Cloud_Bigquery_V2_QueryParameterStructType, rhs: Google_Cloud_Bigquery_V2_QueryParameterStructType) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs._type != rhs._type {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Bigquery_V2_QueryParameterType: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = _protobuf_package + ".QueryParameterType"
  package static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .standard(proto: "array_type"),
    3: .standard(proto: "struct_types"),
    4: .standard(proto: "range_element_type"),
  ]

  fileprivate class _StorageClass {
    var _type: String = String()
    var _arrayType: Google_Cloud_Bigquery_V2_QueryParameterType? = nil
    var _structTypes: [Google_Cloud_Bigquery_V2_QueryParameterStructType] = []
    var _rangeElementType: Google_Cloud_Bigquery_V2_QueryParameterType? = nil

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _type = source._type
      _arrayType = source._arrayType
      _structTypes = source._structTypes
      _rangeElementType = source._rangeElementType
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  package mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._type) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._arrayType) }()
        case 3: try { try decoder.decodeRepeatedMessageField(value: &_storage._structTypes) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._rangeElementType) }()
        default: break
        }
      }
    }
  }

  package func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._type.isEmpty {
        try visitor.visitSingularStringField(value: _storage._type, fieldNumber: 1)
      }
      try { if let v = _storage._arrayType {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      if !_storage._structTypes.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._structTypes, fieldNumber: 3)
      }
      try { if let v = _storage._rangeElementType {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: Google_Cloud_Bigquery_V2_QueryParameterType, rhs: Google_Cloud_Bigquery_V2_QueryParameterType) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._type != rhs_storage._type {return false}
        if _storage._arrayType != rhs_storage._arrayType {return false}
        if _storage._structTypes != rhs_storage._structTypes {return false}
        if _storage._rangeElementType != rhs_storage._rangeElementType {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Bigquery_V2_RangeValue: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = _protobuf_package + ".RangeValue"
  package static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "start"),
    2: .same(proto: "end"),
  ]

  fileprivate class _StorageClass {
    var _start: Google_Cloud_Bigquery_V2_QueryParameterValue? = nil
    var _end: Google_Cloud_Bigquery_V2_QueryParameterValue? = nil

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _start = source._start
      _end = source._end
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  package mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._start) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._end) }()
        default: break
        }
      }
    }
  }

  package func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._start {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._end {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: Google_Cloud_Bigquery_V2_RangeValue, rhs: Google_Cloud_Bigquery_V2_RangeValue) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._start != rhs_storage._start {return false}
        if _storage._end != rhs_storage._end {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Bigquery_V2_QueryParameterValue: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = _protobuf_package + ".QueryParameterValue"
  package static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
    2: .standard(proto: "array_values"),
    3: .standard(proto: "struct_values"),
    6: .standard(proto: "range_value"),
    5: .standard(proto: "alt_struct_values"),
  ]

  fileprivate class _StorageClass {
    var _value: SwiftProtobuf.Google_Protobuf_StringValue? = nil
    var _arrayValues: [Google_Cloud_Bigquery_V2_QueryParameterValue] = []
    var _structValues: Dictionary<String,Google_Cloud_Bigquery_V2_QueryParameterValue> = [:]
    var _rangeValue: Google_Cloud_Bigquery_V2_RangeValue? = nil
    var _altStructValues: [SwiftProtobuf.Google_Protobuf_Value] = []

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _value = source._value
      _arrayValues = source._arrayValues
      _structValues = source._structValues
      _rangeValue = source._rangeValue
      _altStructValues = source._altStructValues
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  package mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._value) }()
        case 2: try { try decoder.decodeRepeatedMessageField(value: &_storage._arrayValues) }()
        case 3: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Google_Cloud_Bigquery_V2_QueryParameterValue>.self, value: &_storage._structValues) }()
        case 5: try { try decoder.decodeRepeatedMessageField(value: &_storage._altStructValues) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._rangeValue) }()
        default: break
        }
      }
    }
  }

  package func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._value {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      if !_storage._arrayValues.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._arrayValues, fieldNumber: 2)
      }
      if !_storage._structValues.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Google_Cloud_Bigquery_V2_QueryParameterValue>.self, value: _storage._structValues, fieldNumber: 3)
      }
      if !_storage._altStructValues.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._altStructValues, fieldNumber: 5)
      }
      try { if let v = _storage._rangeValue {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: Google_Cloud_Bigquery_V2_QueryParameterValue, rhs: Google_Cloud_Bigquery_V2_QueryParameterValue) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._value != rhs_storage._value {return false}
        if _storage._arrayValues != rhs_storage._arrayValues {return false}
        if _storage._structValues != rhs_storage._structValues {return false}
        if _storage._rangeValue != rhs_storage._rangeValue {return false}
        if _storage._altStructValues != rhs_storage._altStructValues {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Bigquery_V2_QueryParameter: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = _protobuf_package + ".QueryParameter"
  package static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "parameter_type"),
    3: .standard(proto: "parameter_value"),
  ]

  package mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._parameterType) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._parameterValue) }()
      default: break
      }
    }
  }

  package func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    try { if let v = self._parameterType {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._parameterValue {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: Google_Cloud_Bigquery_V2_QueryParameter, rhs: Google_Cloud_Bigquery_V2_QueryParameter) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs._parameterType != rhs._parameterType {return false}
    if lhs._parameterValue != rhs._parameterValue {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
