// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the gRPC Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/bigquery/v2/table.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/grpc/grpc-swift

import GRPCCore
import GRPCProtobuf
import SwiftProtobuf

// MARK: - google.cloud.bigquery.v2.TableService

/// Namespace containing generated types for the "google.cloud.bigquery.v2.TableService" service.
package enum Google_Cloud_Bigquery_V2_TableService {
    /// Service descriptor for the "google.cloud.bigquery.v2.TableService" service.
    package static let descriptor = GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.bigquery.v2.TableService")
    /// Namespace for method metadata.
    package enum Method {
        /// Namespace for "GetTable" metadata.
        package enum GetTable {
            /// Request type for "GetTable".
            package typealias Input = Google_Cloud_Bigquery_V2_GetTableRequest
            /// Response type for "GetTable".
            package typealias Output = Google_Cloud_Bigquery_V2_Table
            /// Descriptor for "GetTable".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.bigquery.v2.TableService"),
                method: "GetTable"
            )
        }
        /// Namespace for "InsertTable" metadata.
        package enum InsertTable {
            /// Request type for "InsertTable".
            package typealias Input = Google_Cloud_Bigquery_V2_InsertTableRequest
            /// Response type for "InsertTable".
            package typealias Output = Google_Cloud_Bigquery_V2_Table
            /// Descriptor for "InsertTable".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.bigquery.v2.TableService"),
                method: "InsertTable"
            )
        }
        /// Namespace for "PatchTable" metadata.
        package enum PatchTable {
            /// Request type for "PatchTable".
            package typealias Input = Google_Cloud_Bigquery_V2_UpdateOrPatchTableRequest
            /// Response type for "PatchTable".
            package typealias Output = Google_Cloud_Bigquery_V2_Table
            /// Descriptor for "PatchTable".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.bigquery.v2.TableService"),
                method: "PatchTable"
            )
        }
        /// Namespace for "UpdateTable" metadata.
        package enum UpdateTable {
            /// Request type for "UpdateTable".
            package typealias Input = Google_Cloud_Bigquery_V2_UpdateOrPatchTableRequest
            /// Response type for "UpdateTable".
            package typealias Output = Google_Cloud_Bigquery_V2_Table
            /// Descriptor for "UpdateTable".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.bigquery.v2.TableService"),
                method: "UpdateTable"
            )
        }
        /// Namespace for "DeleteTable" metadata.
        package enum DeleteTable {
            /// Request type for "DeleteTable".
            package typealias Input = Google_Cloud_Bigquery_V2_DeleteTableRequest
            /// Response type for "DeleteTable".
            package typealias Output = SwiftProtobuf.Google_Protobuf_Empty
            /// Descriptor for "DeleteTable".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.bigquery.v2.TableService"),
                method: "DeleteTable"
            )
        }
        /// Namespace for "ListTables" metadata.
        package enum ListTables {
            /// Request type for "ListTables".
            package typealias Input = Google_Cloud_Bigquery_V2_ListTablesRequest
            /// Response type for "ListTables".
            package typealias Output = Google_Cloud_Bigquery_V2_TableList
            /// Descriptor for "ListTables".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.bigquery.v2.TableService"),
                method: "ListTables"
            )
        }
        /// Descriptors for all methods in the "google.cloud.bigquery.v2.TableService" service.
        package static let descriptors: [GRPCCore.MethodDescriptor] = [
            GetTable.descriptor,
            InsertTable.descriptor,
            PatchTable.descriptor,
            UpdateTable.descriptor,
            DeleteTable.descriptor,
            ListTables.descriptor
        ]
    }
}

extension GRPCCore.ServiceDescriptor {
    /// Service descriptor for the "google.cloud.bigquery.v2.TableService" service.
    package static let google_cloud_bigquery_v2_TableService = GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.bigquery.v2.TableService")
}

// MARK: google.cloud.bigquery.v2.TableService (client)

extension Google_Cloud_Bigquery_V2_TableService {
    /// Generated client protocol for the "google.cloud.bigquery.v2.TableService" service.
    ///
    /// You don't need to implement this protocol directly, use the generated
    /// implementation, ``Client``.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > TableService provides methods for managing BigQuery tables and table-like
    /// > entities such as views and snapshots.
    package protocol ClientProtocol: Sendable {
        /// Call the "GetTable" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Gets the specified table resource by table ID.
        /// > This method does not return the data in the table, it only returns the
        /// > table resource, which describes the structure of this table.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Bigquery_V2_GetTableRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Bigquery_V2_GetTableRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Bigquery_V2_Table` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getTable<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_GetTableRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Bigquery_V2_GetTableRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Bigquery_V2_Table>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_V2_Table>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "InsertTable" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Creates a new, empty table in the dataset.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Bigquery_V2_InsertTableRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Bigquery_V2_InsertTableRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Bigquery_V2_Table` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func insertTable<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_InsertTableRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Bigquery_V2_InsertTableRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Bigquery_V2_Table>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_V2_Table>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "PatchTable" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Updates information in an existing table. The update method replaces the
        /// > entire table resource, whereas the patch method only replaces fields that
        /// > are provided in the submitted table resource.
        /// > This method supports RFC5789 patch semantics.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Bigquery_V2_UpdateOrPatchTableRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Bigquery_V2_UpdateOrPatchTableRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Bigquery_V2_Table` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func patchTable<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_UpdateOrPatchTableRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Bigquery_V2_UpdateOrPatchTableRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Bigquery_V2_Table>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_V2_Table>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "UpdateTable" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Updates information in an existing table. The update method replaces the
        /// > entire Table resource, whereas the patch method only replaces fields that
        /// > are provided in the submitted Table resource.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Bigquery_V2_UpdateOrPatchTableRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Bigquery_V2_UpdateOrPatchTableRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Bigquery_V2_Table` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func updateTable<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_UpdateOrPatchTableRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Bigquery_V2_UpdateOrPatchTableRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Bigquery_V2_Table>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_V2_Table>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "DeleteTable" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Deletes the table specified by tableId from the dataset.
        /// > If the table contains data, all the data will be deleted.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Bigquery_V2_DeleteTableRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Bigquery_V2_DeleteTableRequest` messages.
        ///   - deserializer: A deserializer for `SwiftProtobuf.Google_Protobuf_Empty` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func deleteTable<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_DeleteTableRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Bigquery_V2_DeleteTableRequest>,
            deserializer: some GRPCCore.MessageDeserializer<SwiftProtobuf.Google_Protobuf_Empty>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "ListTables" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Lists all tables in the specified dataset. Requires the READER dataset
        /// > role.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Bigquery_V2_ListTablesRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Bigquery_V2_ListTablesRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Bigquery_V2_TableList` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func listTables<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_ListTablesRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Bigquery_V2_ListTablesRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Bigquery_V2_TableList>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_V2_TableList>) async throws -> Result
        ) async throws -> Result where Result: Sendable
    }

    /// Generated client for the "google.cloud.bigquery.v2.TableService" service.
    ///
    /// The ``Client`` provides an implementation of ``ClientProtocol`` which wraps
    /// a `GRPCCore.GRPCCClient`. The underlying `GRPCClient` provides the long-lived
    /// means of communication with the remote peer.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > TableService provides methods for managing BigQuery tables and table-like
    /// > entities such as views and snapshots.
    package struct Client: ClientProtocol {
        private let client: GRPCCore.GRPCClient

        /// Creates a new client wrapping the provided `GRPCCore.GRPCClient`.
        ///
        /// - Parameters:
        ///   - client: A `GRPCCore.GRPCClient` providing a communication channel to the service.
        package init(wrapping client: GRPCCore.GRPCClient) {
            self.client = client
        }

        /// Call the "GetTable" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Gets the specified table resource by table ID.
        /// > This method does not return the data in the table, it only returns the
        /// > table resource, which describes the structure of this table.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Bigquery_V2_GetTableRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Bigquery_V2_GetTableRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Bigquery_V2_Table` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func getTable<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_GetTableRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Bigquery_V2_GetTableRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Bigquery_V2_Table>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_V2_Table>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Bigquery_V2_TableService.Method.GetTable.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "InsertTable" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Creates a new, empty table in the dataset.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Bigquery_V2_InsertTableRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Bigquery_V2_InsertTableRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Bigquery_V2_Table` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func insertTable<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_InsertTableRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Bigquery_V2_InsertTableRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Bigquery_V2_Table>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_V2_Table>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Bigquery_V2_TableService.Method.InsertTable.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "PatchTable" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Updates information in an existing table. The update method replaces the
        /// > entire table resource, whereas the patch method only replaces fields that
        /// > are provided in the submitted table resource.
        /// > This method supports RFC5789 patch semantics.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Bigquery_V2_UpdateOrPatchTableRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Bigquery_V2_UpdateOrPatchTableRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Bigquery_V2_Table` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func patchTable<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_UpdateOrPatchTableRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Bigquery_V2_UpdateOrPatchTableRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Bigquery_V2_Table>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_V2_Table>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Bigquery_V2_TableService.Method.PatchTable.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "UpdateTable" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Updates information in an existing table. The update method replaces the
        /// > entire Table resource, whereas the patch method only replaces fields that
        /// > are provided in the submitted Table resource.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Bigquery_V2_UpdateOrPatchTableRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Bigquery_V2_UpdateOrPatchTableRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Bigquery_V2_Table` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func updateTable<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_UpdateOrPatchTableRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Bigquery_V2_UpdateOrPatchTableRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Bigquery_V2_Table>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_V2_Table>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Bigquery_V2_TableService.Method.UpdateTable.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "DeleteTable" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Deletes the table specified by tableId from the dataset.
        /// > If the table contains data, all the data will be deleted.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Bigquery_V2_DeleteTableRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Bigquery_V2_DeleteTableRequest` messages.
        ///   - deserializer: A deserializer for `SwiftProtobuf.Google_Protobuf_Empty` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func deleteTable<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_DeleteTableRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Bigquery_V2_DeleteTableRequest>,
            deserializer: some GRPCCore.MessageDeserializer<SwiftProtobuf.Google_Protobuf_Empty>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Bigquery_V2_TableService.Method.DeleteTable.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "ListTables" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Lists all tables in the specified dataset. Requires the READER dataset
        /// > role.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Bigquery_V2_ListTablesRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Bigquery_V2_ListTablesRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Bigquery_V2_TableList` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func listTables<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_ListTablesRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Bigquery_V2_ListTablesRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Bigquery_V2_TableList>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_V2_TableList>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Bigquery_V2_TableService.Method.ListTables.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }
    }
}

// Helpers providing default arguments to 'ClientProtocol' methods.
extension Google_Cloud_Bigquery_V2_TableService.ClientProtocol {
    /// Call the "GetTable" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Gets the specified table resource by table ID.
    /// > This method does not return the data in the table, it only returns the
    /// > table resource, which describes the structure of this table.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Bigquery_V2_GetTableRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func getTable<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_GetTableRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_V2_Table>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getTable(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Bigquery_V2_GetTableRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Bigquery_V2_Table>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "InsertTable" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Creates a new, empty table in the dataset.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Bigquery_V2_InsertTableRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func insertTable<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_InsertTableRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_V2_Table>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.insertTable(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Bigquery_V2_InsertTableRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Bigquery_V2_Table>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "PatchTable" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Updates information in an existing table. The update method replaces the
    /// > entire table resource, whereas the patch method only replaces fields that
    /// > are provided in the submitted table resource.
    /// > This method supports RFC5789 patch semantics.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Bigquery_V2_UpdateOrPatchTableRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func patchTable<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_UpdateOrPatchTableRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_V2_Table>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.patchTable(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Bigquery_V2_UpdateOrPatchTableRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Bigquery_V2_Table>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UpdateTable" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Updates information in an existing table. The update method replaces the
    /// > entire Table resource, whereas the patch method only replaces fields that
    /// > are provided in the submitted Table resource.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Bigquery_V2_UpdateOrPatchTableRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func updateTable<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_UpdateOrPatchTableRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_V2_Table>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.updateTable(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Bigquery_V2_UpdateOrPatchTableRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Bigquery_V2_Table>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DeleteTable" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Deletes the table specified by tableId from the dataset.
    /// > If the table contains data, all the data will be deleted.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Bigquery_V2_DeleteTableRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func deleteTable<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_DeleteTableRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.deleteTable(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Bigquery_V2_DeleteTableRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListTables" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Lists all tables in the specified dataset. Requires the READER dataset
    /// > role.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Bigquery_V2_ListTablesRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func listTables<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_ListTablesRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_V2_TableList>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.listTables(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Bigquery_V2_ListTablesRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Bigquery_V2_TableList>(),
            options: options,
            onResponse: handleResponse
        )
    }
}

// Helpers providing sugared APIs for 'ClientProtocol' methods.
extension Google_Cloud_Bigquery_V2_TableService.ClientProtocol {
    /// Call the "GetTable" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Gets the specified table resource by table ID.
    /// > This method does not return the data in the table, it only returns the
    /// > table resource, which describes the structure of this table.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func getTable<Result>(
        _ message: Google_Cloud_Bigquery_V2_GetTableRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_V2_Table>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_GetTableRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getTable(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "InsertTable" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Creates a new, empty table in the dataset.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func insertTable<Result>(
        _ message: Google_Cloud_Bigquery_V2_InsertTableRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_V2_Table>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_InsertTableRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.insertTable(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "PatchTable" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Updates information in an existing table. The update method replaces the
    /// > entire table resource, whereas the patch method only replaces fields that
    /// > are provided in the submitted table resource.
    /// > This method supports RFC5789 patch semantics.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func patchTable<Result>(
        _ message: Google_Cloud_Bigquery_V2_UpdateOrPatchTableRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_V2_Table>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_UpdateOrPatchTableRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.patchTable(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UpdateTable" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Updates information in an existing table. The update method replaces the
    /// > entire Table resource, whereas the patch method only replaces fields that
    /// > are provided in the submitted Table resource.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func updateTable<Result>(
        _ message: Google_Cloud_Bigquery_V2_UpdateOrPatchTableRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_V2_Table>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_UpdateOrPatchTableRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.updateTable(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DeleteTable" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Deletes the table specified by tableId from the dataset.
    /// > If the table contains data, all the data will be deleted.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func deleteTable<Result>(
        _ message: Google_Cloud_Bigquery_V2_DeleteTableRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_DeleteTableRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.deleteTable(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListTables" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Lists all tables in the specified dataset. Requires the READER dataset
    /// > role.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func listTables<Result>(
        _ message: Google_Cloud_Bigquery_V2_ListTablesRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_V2_TableList>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_ListTablesRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.listTables(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }
}