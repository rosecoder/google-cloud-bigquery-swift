// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the gRPC Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/bigquery/v2/routine.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/grpc/grpc-swift

import GRPCCore
import GRPCProtobuf
import SwiftProtobuf

// MARK: - google.cloud.bigquery.v2.RoutineService

/// Namespace containing generated types for the "google.cloud.bigquery.v2.RoutineService" service.
package enum Google_Cloud_Bigquery_V2_RoutineService {
    /// Service descriptor for the "google.cloud.bigquery.v2.RoutineService" service.
    package static let descriptor = GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.bigquery.v2.RoutineService")
    /// Namespace for method metadata.
    package enum Method {
        /// Namespace for "GetRoutine" metadata.
        package enum GetRoutine {
            /// Request type for "GetRoutine".
            package typealias Input = Google_Cloud_Bigquery_V2_GetRoutineRequest
            /// Response type for "GetRoutine".
            package typealias Output = Google_Cloud_Bigquery_V2_Routine
            /// Descriptor for "GetRoutine".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.bigquery.v2.RoutineService"),
                method: "GetRoutine"
            )
        }
        /// Namespace for "InsertRoutine" metadata.
        package enum InsertRoutine {
            /// Request type for "InsertRoutine".
            package typealias Input = Google_Cloud_Bigquery_V2_InsertRoutineRequest
            /// Response type for "InsertRoutine".
            package typealias Output = Google_Cloud_Bigquery_V2_Routine
            /// Descriptor for "InsertRoutine".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.bigquery.v2.RoutineService"),
                method: "InsertRoutine"
            )
        }
        /// Namespace for "UpdateRoutine" metadata.
        package enum UpdateRoutine {
            /// Request type for "UpdateRoutine".
            package typealias Input = Google_Cloud_Bigquery_V2_UpdateRoutineRequest
            /// Response type for "UpdateRoutine".
            package typealias Output = Google_Cloud_Bigquery_V2_Routine
            /// Descriptor for "UpdateRoutine".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.bigquery.v2.RoutineService"),
                method: "UpdateRoutine"
            )
        }
        /// Namespace for "PatchRoutine" metadata.
        package enum PatchRoutine {
            /// Request type for "PatchRoutine".
            package typealias Input = Google_Cloud_Bigquery_V2_PatchRoutineRequest
            /// Response type for "PatchRoutine".
            package typealias Output = Google_Cloud_Bigquery_V2_Routine
            /// Descriptor for "PatchRoutine".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.bigquery.v2.RoutineService"),
                method: "PatchRoutine"
            )
        }
        /// Namespace for "DeleteRoutine" metadata.
        package enum DeleteRoutine {
            /// Request type for "DeleteRoutine".
            package typealias Input = Google_Cloud_Bigquery_V2_DeleteRoutineRequest
            /// Response type for "DeleteRoutine".
            package typealias Output = SwiftProtobuf.Google_Protobuf_Empty
            /// Descriptor for "DeleteRoutine".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.bigquery.v2.RoutineService"),
                method: "DeleteRoutine"
            )
        }
        /// Namespace for "ListRoutines" metadata.
        package enum ListRoutines {
            /// Request type for "ListRoutines".
            package typealias Input = Google_Cloud_Bigquery_V2_ListRoutinesRequest
            /// Response type for "ListRoutines".
            package typealias Output = Google_Cloud_Bigquery_V2_ListRoutinesResponse
            /// Descriptor for "ListRoutines".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.bigquery.v2.RoutineService"),
                method: "ListRoutines"
            )
        }
        /// Descriptors for all methods in the "google.cloud.bigquery.v2.RoutineService" service.
        package static let descriptors: [GRPCCore.MethodDescriptor] = [
            GetRoutine.descriptor,
            InsertRoutine.descriptor,
            UpdateRoutine.descriptor,
            PatchRoutine.descriptor,
            DeleteRoutine.descriptor,
            ListRoutines.descriptor
        ]
    }
}

extension GRPCCore.ServiceDescriptor {
    /// Service descriptor for the "google.cloud.bigquery.v2.RoutineService" service.
    package static let google_cloud_bigquery_v2_RoutineService = GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.bigquery.v2.RoutineService")
}

// MARK: google.cloud.bigquery.v2.RoutineService (client)

extension Google_Cloud_Bigquery_V2_RoutineService {
    /// Generated client protocol for the "google.cloud.bigquery.v2.RoutineService" service.
    ///
    /// You don't need to implement this protocol directly, use the generated
    /// implementation, ``Client``.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > RoutineService provides management access to BigQuery routines.
    package protocol ClientProtocol: Sendable {
        /// Call the "GetRoutine" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Gets the specified routine resource by routine ID.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Bigquery_V2_GetRoutineRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Bigquery_V2_GetRoutineRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Bigquery_V2_Routine` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getRoutine<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_GetRoutineRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Bigquery_V2_GetRoutineRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Bigquery_V2_Routine>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_V2_Routine>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "InsertRoutine" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Creates a new routine in the dataset.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Bigquery_V2_InsertRoutineRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Bigquery_V2_InsertRoutineRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Bigquery_V2_Routine` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func insertRoutine<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_InsertRoutineRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Bigquery_V2_InsertRoutineRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Bigquery_V2_Routine>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_V2_Routine>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "UpdateRoutine" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Updates information in an existing routine. The update method replaces the
        /// > entire Routine resource.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Bigquery_V2_UpdateRoutineRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Bigquery_V2_UpdateRoutineRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Bigquery_V2_Routine` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func updateRoutine<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_UpdateRoutineRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Bigquery_V2_UpdateRoutineRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Bigquery_V2_Routine>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_V2_Routine>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "PatchRoutine" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Patches information in an existing routine. The patch method does a partial
        /// > update to an existing Routine resource.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Bigquery_V2_PatchRoutineRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Bigquery_V2_PatchRoutineRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Bigquery_V2_Routine` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func patchRoutine<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_PatchRoutineRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Bigquery_V2_PatchRoutineRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Bigquery_V2_Routine>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_V2_Routine>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "DeleteRoutine" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Deletes the routine specified by routineId from the dataset.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Bigquery_V2_DeleteRoutineRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Bigquery_V2_DeleteRoutineRequest` messages.
        ///   - deserializer: A deserializer for `SwiftProtobuf.Google_Protobuf_Empty` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func deleteRoutine<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_DeleteRoutineRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Bigquery_V2_DeleteRoutineRequest>,
            deserializer: some GRPCCore.MessageDeserializer<SwiftProtobuf.Google_Protobuf_Empty>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "ListRoutines" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Lists all routines in the specified dataset. Requires the READER dataset
        /// > role.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Bigquery_V2_ListRoutinesRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Bigquery_V2_ListRoutinesRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Bigquery_V2_ListRoutinesResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func listRoutines<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_ListRoutinesRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Bigquery_V2_ListRoutinesRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Bigquery_V2_ListRoutinesResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_V2_ListRoutinesResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable
    }

    /// Generated client for the "google.cloud.bigquery.v2.RoutineService" service.
    ///
    /// The ``Client`` provides an implementation of ``ClientProtocol`` which wraps
    /// a `GRPCCore.GRPCCClient`. The underlying `GRPCClient` provides the long-lived
    /// means of communication with the remote peer.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > RoutineService provides management access to BigQuery routines.
    package struct Client: ClientProtocol {
        private let client: GRPCCore.GRPCClient

        /// Creates a new client wrapping the provided `GRPCCore.GRPCClient`.
        ///
        /// - Parameters:
        ///   - client: A `GRPCCore.GRPCClient` providing a communication channel to the service.
        package init(wrapping client: GRPCCore.GRPCClient) {
            self.client = client
        }

        /// Call the "GetRoutine" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Gets the specified routine resource by routine ID.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Bigquery_V2_GetRoutineRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Bigquery_V2_GetRoutineRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Bigquery_V2_Routine` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func getRoutine<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_GetRoutineRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Bigquery_V2_GetRoutineRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Bigquery_V2_Routine>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_V2_Routine>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Bigquery_V2_RoutineService.Method.GetRoutine.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "InsertRoutine" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Creates a new routine in the dataset.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Bigquery_V2_InsertRoutineRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Bigquery_V2_InsertRoutineRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Bigquery_V2_Routine` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func insertRoutine<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_InsertRoutineRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Bigquery_V2_InsertRoutineRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Bigquery_V2_Routine>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_V2_Routine>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Bigquery_V2_RoutineService.Method.InsertRoutine.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "UpdateRoutine" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Updates information in an existing routine. The update method replaces the
        /// > entire Routine resource.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Bigquery_V2_UpdateRoutineRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Bigquery_V2_UpdateRoutineRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Bigquery_V2_Routine` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func updateRoutine<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_UpdateRoutineRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Bigquery_V2_UpdateRoutineRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Bigquery_V2_Routine>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_V2_Routine>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Bigquery_V2_RoutineService.Method.UpdateRoutine.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "PatchRoutine" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Patches information in an existing routine. The patch method does a partial
        /// > update to an existing Routine resource.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Bigquery_V2_PatchRoutineRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Bigquery_V2_PatchRoutineRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Bigquery_V2_Routine` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func patchRoutine<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_PatchRoutineRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Bigquery_V2_PatchRoutineRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Bigquery_V2_Routine>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_V2_Routine>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Bigquery_V2_RoutineService.Method.PatchRoutine.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "DeleteRoutine" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Deletes the routine specified by routineId from the dataset.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Bigquery_V2_DeleteRoutineRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Bigquery_V2_DeleteRoutineRequest` messages.
        ///   - deserializer: A deserializer for `SwiftProtobuf.Google_Protobuf_Empty` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func deleteRoutine<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_DeleteRoutineRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Bigquery_V2_DeleteRoutineRequest>,
            deserializer: some GRPCCore.MessageDeserializer<SwiftProtobuf.Google_Protobuf_Empty>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Bigquery_V2_RoutineService.Method.DeleteRoutine.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "ListRoutines" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Lists all routines in the specified dataset. Requires the READER dataset
        /// > role.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Bigquery_V2_ListRoutinesRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Bigquery_V2_ListRoutinesRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Bigquery_V2_ListRoutinesResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func listRoutines<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_ListRoutinesRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Bigquery_V2_ListRoutinesRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Bigquery_V2_ListRoutinesResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_V2_ListRoutinesResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Bigquery_V2_RoutineService.Method.ListRoutines.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }
    }
}

// Helpers providing default arguments to 'ClientProtocol' methods.
extension Google_Cloud_Bigquery_V2_RoutineService.ClientProtocol {
    /// Call the "GetRoutine" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Gets the specified routine resource by routine ID.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Bigquery_V2_GetRoutineRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func getRoutine<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_GetRoutineRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_V2_Routine>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getRoutine(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Bigquery_V2_GetRoutineRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Bigquery_V2_Routine>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "InsertRoutine" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Creates a new routine in the dataset.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Bigquery_V2_InsertRoutineRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func insertRoutine<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_InsertRoutineRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_V2_Routine>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.insertRoutine(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Bigquery_V2_InsertRoutineRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Bigquery_V2_Routine>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UpdateRoutine" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Updates information in an existing routine. The update method replaces the
    /// > entire Routine resource.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Bigquery_V2_UpdateRoutineRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func updateRoutine<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_UpdateRoutineRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_V2_Routine>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.updateRoutine(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Bigquery_V2_UpdateRoutineRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Bigquery_V2_Routine>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "PatchRoutine" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Patches information in an existing routine. The patch method does a partial
    /// > update to an existing Routine resource.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Bigquery_V2_PatchRoutineRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func patchRoutine<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_PatchRoutineRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_V2_Routine>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.patchRoutine(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Bigquery_V2_PatchRoutineRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Bigquery_V2_Routine>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DeleteRoutine" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Deletes the routine specified by routineId from the dataset.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Bigquery_V2_DeleteRoutineRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func deleteRoutine<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_DeleteRoutineRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.deleteRoutine(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Bigquery_V2_DeleteRoutineRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListRoutines" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Lists all routines in the specified dataset. Requires the READER dataset
    /// > role.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Bigquery_V2_ListRoutinesRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func listRoutines<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_ListRoutinesRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_V2_ListRoutinesResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.listRoutines(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Bigquery_V2_ListRoutinesRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Bigquery_V2_ListRoutinesResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }
}

// Helpers providing sugared APIs for 'ClientProtocol' methods.
extension Google_Cloud_Bigquery_V2_RoutineService.ClientProtocol {
    /// Call the "GetRoutine" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Gets the specified routine resource by routine ID.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func getRoutine<Result>(
        _ message: Google_Cloud_Bigquery_V2_GetRoutineRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_V2_Routine>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_GetRoutineRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getRoutine(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "InsertRoutine" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Creates a new routine in the dataset.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func insertRoutine<Result>(
        _ message: Google_Cloud_Bigquery_V2_InsertRoutineRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_V2_Routine>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_InsertRoutineRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.insertRoutine(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UpdateRoutine" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Updates information in an existing routine. The update method replaces the
    /// > entire Routine resource.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func updateRoutine<Result>(
        _ message: Google_Cloud_Bigquery_V2_UpdateRoutineRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_V2_Routine>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_UpdateRoutineRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.updateRoutine(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "PatchRoutine" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Patches information in an existing routine. The patch method does a partial
    /// > update to an existing Routine resource.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func patchRoutine<Result>(
        _ message: Google_Cloud_Bigquery_V2_PatchRoutineRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_V2_Routine>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_PatchRoutineRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.patchRoutine(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DeleteRoutine" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Deletes the routine specified by routineId from the dataset.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func deleteRoutine<Result>(
        _ message: Google_Cloud_Bigquery_V2_DeleteRoutineRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_DeleteRoutineRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.deleteRoutine(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListRoutines" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Lists all routines in the specified dataset. Requires the READER dataset
    /// > role.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func listRoutines<Result>(
        _ message: Google_Cloud_Bigquery_V2_ListRoutinesRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_V2_ListRoutinesResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_ListRoutinesRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.listRoutines(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }
}