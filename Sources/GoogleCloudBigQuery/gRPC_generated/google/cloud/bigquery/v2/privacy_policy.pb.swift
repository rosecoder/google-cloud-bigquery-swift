// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/bigquery/v2/privacy_policy.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Represents privacy policy associated with "aggregation threshold" method.
package struct Google_Cloud_Bigquery_V2_AggregationThresholdPolicy: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Optional. The threshold for the "aggregation threshold" policy.
  package var threshold: Int64 {
    get {return _threshold ?? 0}
    set {_threshold = newValue}
  }
  /// Returns true if `threshold` has been explicitly set.
  package var hasThreshold: Bool {return self._threshold != nil}
  /// Clears the value of `threshold`. Subsequent reads from it will return its default value.
  package mutating func clearThreshold() {self._threshold = nil}

  /// Optional. The privacy unit column(s) associated with this policy.
  /// For now, only one column per data source object (table, view) is allowed as
  /// a privacy unit column.
  /// Representing as a repeated field in metadata for extensibility to
  /// multiple columns in future.
  /// Duplicates and Repeated struct fields are not allowed.
  /// For nested fields, use dot notation ("outer.inner")
  package var privacyUnitColumns: [String] = []

  package var unknownFields = SwiftProtobuf.UnknownStorage()

  package init() {}

  fileprivate var _threshold: Int64? = nil
}

/// Represents privacy policy associated with "differential privacy" method.
package struct Google_Cloud_Bigquery_V2_DifferentialPrivacyPolicy: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Optional. The maximum epsilon value that a query can consume. If the
  /// subscriber specifies epsilon as a parameter in a SELECT query, it must be
  /// less than or equal to this value. The epsilon parameter controls the amount
  /// of noise that is added to the groups â€” a higher epsilon means less noise.
  package var maxEpsilonPerQuery: Double {
    get {return _maxEpsilonPerQuery ?? 0}
    set {_maxEpsilonPerQuery = newValue}
  }
  /// Returns true if `maxEpsilonPerQuery` has been explicitly set.
  package var hasMaxEpsilonPerQuery: Bool {return self._maxEpsilonPerQuery != nil}
  /// Clears the value of `maxEpsilonPerQuery`. Subsequent reads from it will return its default value.
  package mutating func clearMaxEpsilonPerQuery() {self._maxEpsilonPerQuery = nil}

  /// Optional. The delta value that is used per query. Delta represents the
  /// probability that any row will fail to be epsilon differentially private.
  /// Indicates the risk associated with exposing aggregate rows in the result of
  /// a query.
  package var deltaPerQuery: Double {
    get {return _deltaPerQuery ?? 0}
    set {_deltaPerQuery = newValue}
  }
  /// Returns true if `deltaPerQuery` has been explicitly set.
  package var hasDeltaPerQuery: Bool {return self._deltaPerQuery != nil}
  /// Clears the value of `deltaPerQuery`. Subsequent reads from it will return its default value.
  package mutating func clearDeltaPerQuery() {self._deltaPerQuery = nil}

  /// Optional. The maximum groups contributed value that is used per query.
  /// Represents the maximum number of groups to which each protected entity can
  /// contribute. Changing this value does not improve or worsen privacy. The
  /// best value for accuracy and utility depends on the query and data.
  package var maxGroupsContributed: Int64 {
    get {return _maxGroupsContributed ?? 0}
    set {_maxGroupsContributed = newValue}
  }
  /// Returns true if `maxGroupsContributed` has been explicitly set.
  package var hasMaxGroupsContributed: Bool {return self._maxGroupsContributed != nil}
  /// Clears the value of `maxGroupsContributed`. Subsequent reads from it will return its default value.
  package mutating func clearMaxGroupsContributed() {self._maxGroupsContributed = nil}

  /// Optional. The privacy unit column associated with this policy. Differential
  /// privacy policies can only have one privacy unit column per data source
  /// object (table, view).
  package var privacyUnitColumn: String {
    get {return _privacyUnitColumn ?? String()}
    set {_privacyUnitColumn = newValue}
  }
  /// Returns true if `privacyUnitColumn` has been explicitly set.
  package var hasPrivacyUnitColumn: Bool {return self._privacyUnitColumn != nil}
  /// Clears the value of `privacyUnitColumn`. Subsequent reads from it will return its default value.
  package mutating func clearPrivacyUnitColumn() {self._privacyUnitColumn = nil}

  /// Optional. The total epsilon budget for all queries against the
  /// privacy-protected view. Each subscriber query against this view charges the
  /// amount of epsilon they request in their query. If there is sufficient
  /// budget, then the subscriber query attempts to complete. It might still fail
  /// due to other reasons, in which case the charge is refunded. If there is
  /// insufficient budget the query is rejected. There might be multiple charge
  /// attempts if a single query references multiple views. In this case there
  /// must be sufficient budget for all charges or the query is rejected and
  /// charges are refunded in best effort. The budget does not have a refresh
  /// policy and can only be updated via ALTER VIEW or circumvented by creating a
  /// new view that can be queried with a fresh budget.
  package var epsilonBudget: Double {
    get {return _epsilonBudget ?? 0}
    set {_epsilonBudget = newValue}
  }
  /// Returns true if `epsilonBudget` has been explicitly set.
  package var hasEpsilonBudget: Bool {return self._epsilonBudget != nil}
  /// Clears the value of `epsilonBudget`. Subsequent reads from it will return its default value.
  package mutating func clearEpsilonBudget() {self._epsilonBudget = nil}

  /// Optional. The total delta budget for all queries against the
  /// privacy-protected view. Each subscriber query against this view charges the
  /// amount of delta that is pre-defined by the contributor through the privacy
  /// policy delta_per_query field. If there is sufficient budget, then the
  /// subscriber query attempts to complete. It might still fail due to other
  /// reasons, in which case the charge is refunded. If there is insufficient
  /// budget the query is rejected. There might be multiple charge attempts if a
  /// single query references multiple views. In this case there must be
  /// sufficient budget for all charges or the query is rejected and charges are
  /// refunded in best effort. The budget does not have a refresh policy and can
  /// only be updated via ALTER VIEW or circumvented by creating a new view that
  /// can be queried with a fresh budget.
  package var deltaBudget: Double {
    get {return _deltaBudget ?? 0}
    set {_deltaBudget = newValue}
  }
  /// Returns true if `deltaBudget` has been explicitly set.
  package var hasDeltaBudget: Bool {return self._deltaBudget != nil}
  /// Clears the value of `deltaBudget`. Subsequent reads from it will return its default value.
  package mutating func clearDeltaBudget() {self._deltaBudget = nil}

  /// Output only. The epsilon budget remaining. If budget is exhausted, no more
  /// queries are allowed. Note that the budget for queries that are in progress
  /// is deducted before the query executes. If the query fails or is cancelled
  /// then the budget is refunded. In this case the amount of budget remaining
  /// can increase.
  package var epsilonBudgetRemaining: Double {
    get {return _epsilonBudgetRemaining ?? 0}
    set {_epsilonBudgetRemaining = newValue}
  }
  /// Returns true if `epsilonBudgetRemaining` has been explicitly set.
  package var hasEpsilonBudgetRemaining: Bool {return self._epsilonBudgetRemaining != nil}
  /// Clears the value of `epsilonBudgetRemaining`. Subsequent reads from it will return its default value.
  package mutating func clearEpsilonBudgetRemaining() {self._epsilonBudgetRemaining = nil}

  /// Output only. The delta budget remaining. If budget is exhausted, no more
  /// queries are allowed. Note that the budget for queries that are in progress
  /// is deducted before the query executes. If the query fails or is cancelled
  /// then the budget is refunded. In this case the amount of budget remaining
  /// can increase.
  package var deltaBudgetRemaining: Double {
    get {return _deltaBudgetRemaining ?? 0}
    set {_deltaBudgetRemaining = newValue}
  }
  /// Returns true if `deltaBudgetRemaining` has been explicitly set.
  package var hasDeltaBudgetRemaining: Bool {return self._deltaBudgetRemaining != nil}
  /// Clears the value of `deltaBudgetRemaining`. Subsequent reads from it will return its default value.
  package mutating func clearDeltaBudgetRemaining() {self._deltaBudgetRemaining = nil}

  package var unknownFields = SwiftProtobuf.UnknownStorage()

  package init() {}

  fileprivate var _maxEpsilonPerQuery: Double? = nil
  fileprivate var _deltaPerQuery: Double? = nil
  fileprivate var _maxGroupsContributed: Int64? = nil
  fileprivate var _privacyUnitColumn: String? = nil
  fileprivate var _epsilonBudget: Double? = nil
  fileprivate var _deltaBudget: Double? = nil
  fileprivate var _epsilonBudgetRemaining: Double? = nil
  fileprivate var _deltaBudgetRemaining: Double? = nil
}

/// Represents privacy policy associated with "join restrictions". Join
/// restriction gives data providers the ability to enforce joins on the
/// 'join_allowed_columns' when data is queried from a privacy protected view.
package struct Google_Cloud_Bigquery_V2_JoinRestrictionPolicy: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Optional. Specifies if a join is required or not on queries for the view.
  /// Default is JOIN_CONDITION_UNSPECIFIED.
  package var joinCondition: Google_Cloud_Bigquery_V2_JoinRestrictionPolicy.JoinCondition {
    get {return _joinCondition ?? .unspecified}
    set {_joinCondition = newValue}
  }
  /// Returns true if `joinCondition` has been explicitly set.
  package var hasJoinCondition: Bool {return self._joinCondition != nil}
  /// Clears the value of `joinCondition`. Subsequent reads from it will return its default value.
  package mutating func clearJoinCondition() {self._joinCondition = nil}

  /// Optional. The only columns that joins are allowed on.
  /// This field is must be specified for join_conditions JOIN_ANY and JOIN_ALL
  /// and it cannot be set for JOIN_BLOCKED.
  package var joinAllowedColumns: [String] = []

  package var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Enum for Join Restrictions policy.
  package enum JoinCondition: SwiftProtobuf.Enum, Swift.CaseIterable {
    package typealias RawValue = Int

    /// A join is neither required nor restricted on any column. Default value.
    case unspecified // = 0

    /// A join is required on at least one of the specified columns.
    case joinAny // = 1

    /// A join is required on all specified columns.
    case joinAll // = 2

    /// A join is not required, but if present it is only permitted on
    /// 'join_allowed_columns'
    case joinNotRequired // = 3

    /// Joins are blocked for all queries.
    case joinBlocked // = 4
    case UNRECOGNIZED(Int)

    package init() {
      self = .unspecified
    }

    package init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .joinAny
      case 2: self = .joinAll
      case 3: self = .joinNotRequired
      case 4: self = .joinBlocked
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    package var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .joinAny: return 1
      case .joinAll: return 2
      case .joinNotRequired: return 3
      case .joinBlocked: return 4
      case .UNRECOGNIZED(let i): return i
      }
    }

    // The compiler won't synthesize support with the UNRECOGNIZED case.
    package static let allCases: [Google_Cloud_Bigquery_V2_JoinRestrictionPolicy.JoinCondition] = [
      .unspecified,
      .joinAny,
      .joinAll,
      .joinNotRequired,
      .joinBlocked,
    ]

  }

  package init() {}

  fileprivate var _joinCondition: Google_Cloud_Bigquery_V2_JoinRestrictionPolicy.JoinCondition? = nil
}

/// Represents privacy policy that contains the privacy requirements specified by
/// the data owner. Currently, this is only supported on views.
package struct Google_Cloud_Bigquery_V2_PrivacyPolicy: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Privacy policy associated with this requirement specification. Only one of
  /// the privacy methods is allowed per data source object.
  package var privacyPolicy: Google_Cloud_Bigquery_V2_PrivacyPolicy.OneOf_PrivacyPolicy? = nil

  /// Optional. Policy used for aggregation thresholds.
  package var aggregationThresholdPolicy: Google_Cloud_Bigquery_V2_AggregationThresholdPolicy {
    get {
      if case .aggregationThresholdPolicy(let v)? = privacyPolicy {return v}
      return Google_Cloud_Bigquery_V2_AggregationThresholdPolicy()
    }
    set {privacyPolicy = .aggregationThresholdPolicy(newValue)}
  }

  /// Optional. Policy used for differential privacy.
  package var differentialPrivacyPolicy: Google_Cloud_Bigquery_V2_DifferentialPrivacyPolicy {
    get {
      if case .differentialPrivacyPolicy(let v)? = privacyPolicy {return v}
      return Google_Cloud_Bigquery_V2_DifferentialPrivacyPolicy()
    }
    set {privacyPolicy = .differentialPrivacyPolicy(newValue)}
  }

  /// Optional. Join restriction policy is outside of the one of policies, since
  /// this policy can be set along with other policies. This policy gives data
  /// providers the ability to enforce joins on the 'join_allowed_columns' when
  /// data is queried from a privacy protected view.
  package var joinRestrictionPolicy: Google_Cloud_Bigquery_V2_JoinRestrictionPolicy {
    get {return _joinRestrictionPolicy ?? Google_Cloud_Bigquery_V2_JoinRestrictionPolicy()}
    set {_joinRestrictionPolicy = newValue}
  }
  /// Returns true if `joinRestrictionPolicy` has been explicitly set.
  package var hasJoinRestrictionPolicy: Bool {return self._joinRestrictionPolicy != nil}
  /// Clears the value of `joinRestrictionPolicy`. Subsequent reads from it will return its default value.
  package mutating func clearJoinRestrictionPolicy() {self._joinRestrictionPolicy = nil}

  package var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Privacy policy associated with this requirement specification. Only one of
  /// the privacy methods is allowed per data source object.
  package enum OneOf_PrivacyPolicy: Equatable, Sendable {
    /// Optional. Policy used for aggregation thresholds.
    case aggregationThresholdPolicy(Google_Cloud_Bigquery_V2_AggregationThresholdPolicy)
    /// Optional. Policy used for differential privacy.
    case differentialPrivacyPolicy(Google_Cloud_Bigquery_V2_DifferentialPrivacyPolicy)

  }

  package init() {}

  fileprivate var _joinRestrictionPolicy: Google_Cloud_Bigquery_V2_JoinRestrictionPolicy? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.cloud.bigquery.v2"

extension Google_Cloud_Bigquery_V2_AggregationThresholdPolicy: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = _protobuf_package + ".AggregationThresholdPolicy"
  package static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "threshold"),
    2: .standard(proto: "privacy_unit_columns"),
  ]

  package mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self._threshold) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.privacyUnitColumns) }()
      default: break
      }
    }
  }

  package func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._threshold {
      try visitor.visitSingularInt64Field(value: v, fieldNumber: 1)
    } }()
    if !self.privacyUnitColumns.isEmpty {
      try visitor.visitRepeatedStringField(value: self.privacyUnitColumns, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: Google_Cloud_Bigquery_V2_AggregationThresholdPolicy, rhs: Google_Cloud_Bigquery_V2_AggregationThresholdPolicy) -> Bool {
    if lhs._threshold != rhs._threshold {return false}
    if lhs.privacyUnitColumns != rhs.privacyUnitColumns {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Bigquery_V2_DifferentialPrivacyPolicy: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = _protobuf_package + ".DifferentialPrivacyPolicy"
  package static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "max_epsilon_per_query"),
    2: .standard(proto: "delta_per_query"),
    3: .standard(proto: "max_groups_contributed"),
    4: .standard(proto: "privacy_unit_column"),
    5: .standard(proto: "epsilon_budget"),
    6: .standard(proto: "delta_budget"),
    7: .standard(proto: "epsilon_budget_remaining"),
    8: .standard(proto: "delta_budget_remaining"),
  ]

  package mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularDoubleField(value: &self._maxEpsilonPerQuery) }()
      case 2: try { try decoder.decodeSingularDoubleField(value: &self._deltaPerQuery) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self._maxGroupsContributed) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self._privacyUnitColumn) }()
      case 5: try { try decoder.decodeSingularDoubleField(value: &self._epsilonBudget) }()
      case 6: try { try decoder.decodeSingularDoubleField(value: &self._deltaBudget) }()
      case 7: try { try decoder.decodeSingularDoubleField(value: &self._epsilonBudgetRemaining) }()
      case 8: try { try decoder.decodeSingularDoubleField(value: &self._deltaBudgetRemaining) }()
      default: break
      }
    }
  }

  package func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._maxEpsilonPerQuery {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._deltaPerQuery {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._maxGroupsContributed {
      try visitor.visitSingularInt64Field(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._privacyUnitColumn {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._epsilonBudget {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._deltaBudget {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._epsilonBudgetRemaining {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 7)
    } }()
    try { if let v = self._deltaBudgetRemaining {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 8)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: Google_Cloud_Bigquery_V2_DifferentialPrivacyPolicy, rhs: Google_Cloud_Bigquery_V2_DifferentialPrivacyPolicy) -> Bool {
    if lhs._maxEpsilonPerQuery != rhs._maxEpsilonPerQuery {return false}
    if lhs._deltaPerQuery != rhs._deltaPerQuery {return false}
    if lhs._maxGroupsContributed != rhs._maxGroupsContributed {return false}
    if lhs._privacyUnitColumn != rhs._privacyUnitColumn {return false}
    if lhs._epsilonBudget != rhs._epsilonBudget {return false}
    if lhs._deltaBudget != rhs._deltaBudget {return false}
    if lhs._epsilonBudgetRemaining != rhs._epsilonBudgetRemaining {return false}
    if lhs._deltaBudgetRemaining != rhs._deltaBudgetRemaining {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Bigquery_V2_JoinRestrictionPolicy: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = _protobuf_package + ".JoinRestrictionPolicy"
  package static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "join_condition"),
    2: .standard(proto: "join_allowed_columns"),
  ]

  package mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self._joinCondition) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.joinAllowedColumns) }()
      default: break
      }
    }
  }

  package func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._joinCondition {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    } }()
    if !self.joinAllowedColumns.isEmpty {
      try visitor.visitRepeatedStringField(value: self.joinAllowedColumns, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: Google_Cloud_Bigquery_V2_JoinRestrictionPolicy, rhs: Google_Cloud_Bigquery_V2_JoinRestrictionPolicy) -> Bool {
    if lhs._joinCondition != rhs._joinCondition {return false}
    if lhs.joinAllowedColumns != rhs.joinAllowedColumns {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Bigquery_V2_JoinRestrictionPolicy.JoinCondition: SwiftProtobuf._ProtoNameProviding {
  package static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "JOIN_CONDITION_UNSPECIFIED"),
    1: .same(proto: "JOIN_ANY"),
    2: .same(proto: "JOIN_ALL"),
    3: .same(proto: "JOIN_NOT_REQUIRED"),
    4: .same(proto: "JOIN_BLOCKED"),
  ]
}

extension Google_Cloud_Bigquery_V2_PrivacyPolicy: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = _protobuf_package + ".PrivacyPolicy"
  package static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .standard(proto: "aggregation_threshold_policy"),
    3: .standard(proto: "differential_privacy_policy"),
    1: .standard(proto: "join_restriction_policy"),
  ]

  package mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._joinRestrictionPolicy) }()
      case 2: try {
        var v: Google_Cloud_Bigquery_V2_AggregationThresholdPolicy?
        var hadOneofValue = false
        if let current = self.privacyPolicy {
          hadOneofValue = true
          if case .aggregationThresholdPolicy(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.privacyPolicy = .aggregationThresholdPolicy(v)
        }
      }()
      case 3: try {
        var v: Google_Cloud_Bigquery_V2_DifferentialPrivacyPolicy?
        var hadOneofValue = false
        if let current = self.privacyPolicy {
          hadOneofValue = true
          if case .differentialPrivacyPolicy(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.privacyPolicy = .differentialPrivacyPolicy(v)
        }
      }()
      default: break
      }
    }
  }

  package func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._joinRestrictionPolicy {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    switch self.privacyPolicy {
    case .aggregationThresholdPolicy?: try {
      guard case .aggregationThresholdPolicy(let v)? = self.privacyPolicy else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .differentialPrivacyPolicy?: try {
      guard case .differentialPrivacyPolicy(let v)? = self.privacyPolicy else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: Google_Cloud_Bigquery_V2_PrivacyPolicy, rhs: Google_Cloud_Bigquery_V2_PrivacyPolicy) -> Bool {
    if lhs.privacyPolicy != rhs.privacyPolicy {return false}
    if lhs._joinRestrictionPolicy != rhs._joinRestrictionPolicy {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
