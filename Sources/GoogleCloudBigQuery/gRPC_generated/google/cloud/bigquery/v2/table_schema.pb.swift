// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/bigquery/v2/table_schema.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Schema of a table
package struct Google_Cloud_Bigquery_V2_TableSchema: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Describes the fields in a table.
  package var fields: [Google_Cloud_Bigquery_V2_TableFieldSchema] = []

  /// Optional. Specifies metadata of the foreign data type definition in field
  /// schema
  /// ([TableFieldSchema.foreign_type_definition][google.cloud.bigquery.v2.TableFieldSchema.foreign_type_definition]).
  package var foreignTypeInfo: Google_Cloud_Bigquery_V2_ForeignTypeInfo {
    get {return _foreignTypeInfo ?? Google_Cloud_Bigquery_V2_ForeignTypeInfo()}
    set {_foreignTypeInfo = newValue}
  }
  /// Returns true if `foreignTypeInfo` has been explicitly set.
  package var hasForeignTypeInfo: Bool {return self._foreignTypeInfo != nil}
  /// Clears the value of `foreignTypeInfo`. Subsequent reads from it will return its default value.
  package mutating func clearForeignTypeInfo() {self._foreignTypeInfo = nil}

  package var unknownFields = SwiftProtobuf.UnknownStorage()

  package init() {}

  fileprivate var _foreignTypeInfo: Google_Cloud_Bigquery_V2_ForeignTypeInfo? = nil
}

/// Metadata about the foreign data type definition such as the system
/// in which the type is defined.
package struct Google_Cloud_Bigquery_V2_ForeignTypeInfo: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Specifies the system which defines the foreign data type.
  package var typeSystem: Google_Cloud_Bigquery_V2_ForeignTypeInfo.TypeSystem = .unspecified

  package var unknownFields = SwiftProtobuf.UnknownStorage()

  /// External systems, such as query engines or table formats, that have their
  /// own data types.
  package enum TypeSystem: SwiftProtobuf.Enum, Swift.CaseIterable {
    package typealias RawValue = Int

    /// TypeSystem not specified.
    case unspecified // = 0

    /// Represents Hive data types.
    case hive // = 1
    case UNRECOGNIZED(Int)

    package init() {
      self = .unspecified
    }

    package init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .hive
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    package var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .hive: return 1
      case .UNRECOGNIZED(let i): return i
      }
    }

    // The compiler won't synthesize support with the UNRECOGNIZED case.
    package static let allCases: [Google_Cloud_Bigquery_V2_ForeignTypeInfo.TypeSystem] = [
      .unspecified,
      .hive,
    ]

  }

  package init() {}
}

/// Data policy option proto, it currently supports name only, will support
/// precedence later.
package struct Google_Cloud_Bigquery_V2_DataPolicyOption: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Data policy resource name in the form of
  /// projects/project_id/locations/location_id/dataPolicies/data_policy_id.
  package var name: String {
    get {return _name ?? String()}
    set {_name = newValue}
  }
  /// Returns true if `name` has been explicitly set.
  package var hasName: Bool {return self._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
  package mutating func clearName() {self._name = nil}

  package var unknownFields = SwiftProtobuf.UnknownStorage()

  package init() {}

  fileprivate var _name: String? = nil
}

/// A field in TableSchema
package struct Google_Cloud_Bigquery_V2_TableFieldSchema: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. The field name. The name must contain only letters (a-z, A-Z),
  /// numbers (0-9), or underscores (_), and must start with a letter or
  /// underscore. The maximum length is 300 characters.
  package var name: String = String()

  /// Required. The field data type. Possible values include:
  ///
  /// * STRING
  /// * BYTES
  /// * INTEGER (or INT64)
  /// * FLOAT (or FLOAT64)
  /// * BOOLEAN (or BOOL)
  /// * TIMESTAMP
  /// * DATE
  /// * TIME
  /// * DATETIME
  /// * GEOGRAPHY
  /// * NUMERIC
  /// * BIGNUMERIC
  /// * JSON
  /// * RECORD (or STRUCT)
  /// * RANGE
  ///
  /// Use of RECORD/STRUCT indicates that the field contains a nested schema.
  package var type: String = String()

  /// Optional. The field mode. Possible values include NULLABLE, REQUIRED and
  /// REPEATED. The default value is NULLABLE.
  package var mode: String = String()

  /// Optional. Describes the nested schema fields if the type property is set
  /// to RECORD.
  package var fields: [Google_Cloud_Bigquery_V2_TableFieldSchema] = []

  /// Optional. The field description. The maximum length is 1,024 characters.
  package var description_p: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _description_p ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_description_p = newValue}
  }
  /// Returns true if `description_p` has been explicitly set.
  package var hasDescription_p: Bool {return self._description_p != nil}
  /// Clears the value of `description_p`. Subsequent reads from it will return its default value.
  package mutating func clearDescription_p() {self._description_p = nil}

  /// Optional. The policy tags attached to this field, used for field-level
  /// access control. If not set, defaults to empty policy_tags.
  package var policyTags: Google_Cloud_Bigquery_V2_TableFieldSchema.PolicyTagList {
    get {return _policyTags ?? Google_Cloud_Bigquery_V2_TableFieldSchema.PolicyTagList()}
    set {_policyTags = newValue}
  }
  /// Returns true if `policyTags` has been explicitly set.
  package var hasPolicyTags: Bool {return self._policyTags != nil}
  /// Clears the value of `policyTags`. Subsequent reads from it will return its default value.
  package mutating func clearPolicyTags() {self._policyTags = nil}

  /// Optional. Data policy options, will replace the data_policies.
  package var dataPolicies: [Google_Cloud_Bigquery_V2_DataPolicyOption] = []

  /// Optional. Maximum length of values of this field for STRINGS or BYTES.
  ///
  /// If max_length is not specified, no maximum length constraint is imposed
  /// on this field.
  ///
  /// If type = "STRING", then max_length represents the maximum UTF-8
  /// length of strings in this field.
  ///
  /// If type = "BYTES", then max_length represents the maximum number of
  /// bytes in this field.
  ///
  /// It is invalid to set this field if type &ne; "STRING" and &ne; "BYTES".
  package var maxLength: Int64 = 0

  /// Optional. Precision (maximum number of total digits in base 10) and scale
  /// (maximum number of digits in the fractional part in base 10) constraints
  /// for values of this field for NUMERIC or BIGNUMERIC.
  ///
  /// It is invalid to set precision or scale if type &ne; "NUMERIC" and &ne;
  /// "BIGNUMERIC".
  ///
  /// If precision and scale are not specified, no value range constraint is
  /// imposed on this field insofar as values are permitted by the type.
  ///
  /// Values of this NUMERIC or BIGNUMERIC field must be in this range when:
  ///
  /// * Precision (<var>P</var>) and scale (<var>S</var>) are specified:
  ///   [-10<sup><var>P</var>-<var>S</var></sup> + 10<sup>-<var>S</var></sup>,
  ///    10<sup><var>P</var>-<var>S</var></sup> - 10<sup>-<var>S</var></sup>]
  /// * Precision (<var>P</var>) is specified but not scale (and thus scale is
  ///   interpreted to be equal to zero):
  ///   [-10<sup><var>P</var></sup> + 1, 10<sup><var>P</var></sup> - 1].
  ///
  /// Acceptable values for precision and scale if both are specified:
  ///
  /// * If type = "NUMERIC":
  ///   1 &le; precision - scale &le; 29 and 0 &le; scale &le; 9.
  /// * If type = "BIGNUMERIC":
  ///   1 &le; precision - scale &le; 38 and 0 &le; scale &le; 38.
  ///
  /// Acceptable values for precision if only precision is specified but not
  /// scale (and thus scale is interpreted to be equal to zero):
  ///
  /// * If type = "NUMERIC": 1 &le; precision &le; 29.
  /// * If type = "BIGNUMERIC": 1 &le; precision &le; 38.
  ///
  /// If scale is specified but not precision, then it is invalid.
  package var precision: Int64 = 0

  /// Optional. See documentation for precision.
  package var scale: Int64 = 0

  /// Optional. Specifies the rounding mode to be used when storing values of
  /// NUMERIC and BIGNUMERIC type.
  package var roundingMode: Google_Cloud_Bigquery_V2_TableFieldSchema.RoundingMode = .unspecified

  /// Optional. Field collation can be set only when the type of field is STRING.
  /// The following values are supported:
  ///
  /// * 'und:ci': undetermined locale, case insensitive.
  /// * '': empty string. Default to case-sensitive behavior.
  package var collation: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _collation ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_collation = newValue}
  }
  /// Returns true if `collation` has been explicitly set.
  package var hasCollation: Bool {return self._collation != nil}
  /// Clears the value of `collation`. Subsequent reads from it will return its default value.
  package mutating func clearCollation() {self._collation = nil}

  /// Optional. A SQL expression to specify the [default value]
  /// (https://cloud.google.com/bigquery/docs/default-values) for this field.
  package var defaultValueExpression: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _defaultValueExpression ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_defaultValueExpression = newValue}
  }
  /// Returns true if `defaultValueExpression` has been explicitly set.
  package var hasDefaultValueExpression: Bool {return self._defaultValueExpression != nil}
  /// Clears the value of `defaultValueExpression`. Subsequent reads from it will return its default value.
  package mutating func clearDefaultValueExpression() {self._defaultValueExpression = nil}

  /// Optional. The subtype of the RANGE, if the type of this field is RANGE. If
  /// the type is RANGE, this field is required. Values for the field element
  /// type can be the following:
  ///
  /// * DATE
  /// * DATETIME
  /// * TIMESTAMP
  package var rangeElementType: Google_Cloud_Bigquery_V2_TableFieldSchema.FieldElementType {
    get {return _rangeElementType ?? Google_Cloud_Bigquery_V2_TableFieldSchema.FieldElementType()}
    set {_rangeElementType = newValue}
  }
  /// Returns true if `rangeElementType` has been explicitly set.
  package var hasRangeElementType: Bool {return self._rangeElementType != nil}
  /// Clears the value of `rangeElementType`. Subsequent reads from it will return its default value.
  package mutating func clearRangeElementType() {self._rangeElementType = nil}

  /// Optional. Definition of the foreign data type.
  /// Only valid for top-level schema fields (not nested fields).
  /// If the type is FOREIGN, this field is required.
  package var foreignTypeDefinition: String = String()

  package var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Rounding mode options that can be used when storing NUMERIC
  /// or BIGNUMERIC values.
  package enum RoundingMode: SwiftProtobuf.Enum, Swift.CaseIterable {
    package typealias RawValue = Int

    /// Unspecified will default to using ROUND_HALF_AWAY_FROM_ZERO.
    case unspecified // = 0

    /// ROUND_HALF_AWAY_FROM_ZERO rounds half values away from zero
    /// when applying precision and scale upon writing of NUMERIC and BIGNUMERIC
    /// values.
    /// For Scale: 0
    /// 1.1, 1.2, 1.3, 1.4 => 1
    /// 1.5, 1.6, 1.7, 1.8, 1.9 => 2
    case roundHalfAwayFromZero // = 1

    /// ROUND_HALF_EVEN rounds half values to the nearest even value
    /// when applying precision and scale upon writing of NUMERIC and BIGNUMERIC
    /// values.
    /// For Scale: 0
    /// 1.1, 1.2, 1.3, 1.4 => 1
    /// 1.5 => 2
    /// 1.6, 1.7, 1.8, 1.9 => 2
    /// 2.5 => 2
    case roundHalfEven // = 2
    case UNRECOGNIZED(Int)

    package init() {
      self = .unspecified
    }

    package init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecified
      case 1: self = .roundHalfAwayFromZero
      case 2: self = .roundHalfEven
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    package var rawValue: Int {
      switch self {
      case .unspecified: return 0
      case .roundHalfAwayFromZero: return 1
      case .roundHalfEven: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

    // The compiler won't synthesize support with the UNRECOGNIZED case.
    package static let allCases: [Google_Cloud_Bigquery_V2_TableFieldSchema.RoundingMode] = [
      .unspecified,
      .roundHalfAwayFromZero,
      .roundHalfEven,
    ]

  }

  package struct PolicyTagList: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// A list of policy tag resource names. For example,
    /// "projects/1/locations/eu/taxonomies/2/policyTags/3". At most 1 policy tag
    /// is currently allowed.
    package var names: [String] = []

    package var unknownFields = SwiftProtobuf.UnknownStorage()

    package init() {}
  }

  /// Represents the type of a field element.
  package struct FieldElementType: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Required. The type of a field element. For more information, see
    /// [TableFieldSchema.type][google.cloud.bigquery.v2.TableFieldSchema.type].
    package var type: String = String()

    package var unknownFields = SwiftProtobuf.UnknownStorage()

    package init() {}
  }

  package init() {}

  fileprivate var _description_p: SwiftProtobuf.Google_Protobuf_StringValue? = nil
  fileprivate var _policyTags: Google_Cloud_Bigquery_V2_TableFieldSchema.PolicyTagList? = nil
  fileprivate var _collation: SwiftProtobuf.Google_Protobuf_StringValue? = nil
  fileprivate var _defaultValueExpression: SwiftProtobuf.Google_Protobuf_StringValue? = nil
  fileprivate var _rangeElementType: Google_Cloud_Bigquery_V2_TableFieldSchema.FieldElementType? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.cloud.bigquery.v2"

extension Google_Cloud_Bigquery_V2_TableSchema: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = _protobuf_package + ".TableSchema"
  package static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "fields"),
    3: .standard(proto: "foreign_type_info"),
  ]

  package mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.fields) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._foreignTypeInfo) }()
      default: break
      }
    }
  }

  package func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.fields.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.fields, fieldNumber: 1)
    }
    try { if let v = self._foreignTypeInfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: Google_Cloud_Bigquery_V2_TableSchema, rhs: Google_Cloud_Bigquery_V2_TableSchema) -> Bool {
    if lhs.fields != rhs.fields {return false}
    if lhs._foreignTypeInfo != rhs._foreignTypeInfo {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Bigquery_V2_ForeignTypeInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = _protobuf_package + ".ForeignTypeInfo"
  package static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "type_system"),
  ]

  package mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.typeSystem) }()
      default: break
      }
    }
  }

  package func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.typeSystem != .unspecified {
      try visitor.visitSingularEnumField(value: self.typeSystem, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: Google_Cloud_Bigquery_V2_ForeignTypeInfo, rhs: Google_Cloud_Bigquery_V2_ForeignTypeInfo) -> Bool {
    if lhs.typeSystem != rhs.typeSystem {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Bigquery_V2_ForeignTypeInfo.TypeSystem: SwiftProtobuf._ProtoNameProviding {
  package static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "TYPE_SYSTEM_UNSPECIFIED"),
    1: .same(proto: "HIVE"),
  ]
}

extension Google_Cloud_Bigquery_V2_DataPolicyOption: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = _protobuf_package + ".DataPolicyOption"
  package static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
  ]

  package mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._name) }()
      default: break
      }
    }
  }

  package func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._name {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: Google_Cloud_Bigquery_V2_DataPolicyOption, rhs: Google_Cloud_Bigquery_V2_DataPolicyOption) -> Bool {
    if lhs._name != rhs._name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Bigquery_V2_TableFieldSchema: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = _protobuf_package + ".TableFieldSchema"
  package static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "type"),
    3: .same(proto: "mode"),
    4: .same(proto: "fields"),
    6: .same(proto: "description"),
    9: .standard(proto: "policy_tags"),
    21: .standard(proto: "data_policies"),
    10: .standard(proto: "max_length"),
    11: .same(proto: "precision"),
    12: .same(proto: "scale"),
    15: .standard(proto: "rounding_mode"),
    13: .same(proto: "collation"),
    14: .standard(proto: "default_value_expression"),
    18: .standard(proto: "range_element_type"),
    23: .standard(proto: "foreign_type_definition"),
  ]

  package mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.type) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.mode) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.fields) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._description_p) }()
      case 9: try { try decoder.decodeSingularMessageField(value: &self._policyTags) }()
      case 10: try { try decoder.decodeSingularInt64Field(value: &self.maxLength) }()
      case 11: try { try decoder.decodeSingularInt64Field(value: &self.precision) }()
      case 12: try { try decoder.decodeSingularInt64Field(value: &self.scale) }()
      case 13: try { try decoder.decodeSingularMessageField(value: &self._collation) }()
      case 14: try { try decoder.decodeSingularMessageField(value: &self._defaultValueExpression) }()
      case 15: try { try decoder.decodeSingularEnumField(value: &self.roundingMode) }()
      case 18: try { try decoder.decodeSingularMessageField(value: &self._rangeElementType) }()
      case 21: try { try decoder.decodeRepeatedMessageField(value: &self.dataPolicies) }()
      case 23: try { try decoder.decodeSingularStringField(value: &self.foreignTypeDefinition) }()
      default: break
      }
    }
  }

  package func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.type.isEmpty {
      try visitor.visitSingularStringField(value: self.type, fieldNumber: 2)
    }
    if !self.mode.isEmpty {
      try visitor.visitSingularStringField(value: self.mode, fieldNumber: 3)
    }
    if !self.fields.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.fields, fieldNumber: 4)
    }
    try { if let v = self._description_p {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._policyTags {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    } }()
    if self.maxLength != 0 {
      try visitor.visitSingularInt64Field(value: self.maxLength, fieldNumber: 10)
    }
    if self.precision != 0 {
      try visitor.visitSingularInt64Field(value: self.precision, fieldNumber: 11)
    }
    if self.scale != 0 {
      try visitor.visitSingularInt64Field(value: self.scale, fieldNumber: 12)
    }
    try { if let v = self._collation {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
    } }()
    try { if let v = self._defaultValueExpression {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
    } }()
    if self.roundingMode != .unspecified {
      try visitor.visitSingularEnumField(value: self.roundingMode, fieldNumber: 15)
    }
    try { if let v = self._rangeElementType {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 18)
    } }()
    if !self.dataPolicies.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.dataPolicies, fieldNumber: 21)
    }
    if !self.foreignTypeDefinition.isEmpty {
      try visitor.visitSingularStringField(value: self.foreignTypeDefinition, fieldNumber: 23)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: Google_Cloud_Bigquery_V2_TableFieldSchema, rhs: Google_Cloud_Bigquery_V2_TableFieldSchema) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.type != rhs.type {return false}
    if lhs.mode != rhs.mode {return false}
    if lhs.fields != rhs.fields {return false}
    if lhs._description_p != rhs._description_p {return false}
    if lhs._policyTags != rhs._policyTags {return false}
    if lhs.dataPolicies != rhs.dataPolicies {return false}
    if lhs.maxLength != rhs.maxLength {return false}
    if lhs.precision != rhs.precision {return false}
    if lhs.scale != rhs.scale {return false}
    if lhs.roundingMode != rhs.roundingMode {return false}
    if lhs._collation != rhs._collation {return false}
    if lhs._defaultValueExpression != rhs._defaultValueExpression {return false}
    if lhs._rangeElementType != rhs._rangeElementType {return false}
    if lhs.foreignTypeDefinition != rhs.foreignTypeDefinition {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Bigquery_V2_TableFieldSchema.RoundingMode: SwiftProtobuf._ProtoNameProviding {
  package static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ROUNDING_MODE_UNSPECIFIED"),
    1: .same(proto: "ROUND_HALF_AWAY_FROM_ZERO"),
    2: .same(proto: "ROUND_HALF_EVEN"),
  ]
}

extension Google_Cloud_Bigquery_V2_TableFieldSchema.PolicyTagList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = Google_Cloud_Bigquery_V2_TableFieldSchema.protoMessageName + ".PolicyTagList"
  package static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "names"),
  ]

  package mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.names) }()
      default: break
      }
    }
  }

  package func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.names.isEmpty {
      try visitor.visitRepeatedStringField(value: self.names, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: Google_Cloud_Bigquery_V2_TableFieldSchema.PolicyTagList, rhs: Google_Cloud_Bigquery_V2_TableFieldSchema.PolicyTagList) -> Bool {
    if lhs.names != rhs.names {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Bigquery_V2_TableFieldSchema.FieldElementType: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = Google_Cloud_Bigquery_V2_TableFieldSchema.protoMessageName + ".FieldElementType"
  package static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
  ]

  package mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.type) }()
      default: break
      }
    }
  }

  package func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.type.isEmpty {
      try visitor.visitSingularStringField(value: self.type, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: Google_Cloud_Bigquery_V2_TableFieldSchema.FieldElementType, rhs: Google_Cloud_Bigquery_V2_TableFieldSchema.FieldElementType) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
