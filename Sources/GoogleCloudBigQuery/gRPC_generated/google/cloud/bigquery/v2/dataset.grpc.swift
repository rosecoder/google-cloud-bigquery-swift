// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the gRPC Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/bigquery/v2/dataset.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/grpc/grpc-swift

import GRPCCore
import GRPCProtobuf
import SwiftProtobuf

// MARK: - google.cloud.bigquery.v2.DatasetService

/// Namespace containing generated types for the "google.cloud.bigquery.v2.DatasetService" service.
package enum Google_Cloud_Bigquery_V2_DatasetService {
    /// Service descriptor for the "google.cloud.bigquery.v2.DatasetService" service.
    package static let descriptor = GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.bigquery.v2.DatasetService")
    /// Namespace for method metadata.
    package enum Method {
        /// Namespace for "GetDataset" metadata.
        package enum GetDataset {
            /// Request type for "GetDataset".
            package typealias Input = Google_Cloud_Bigquery_V2_GetDatasetRequest
            /// Response type for "GetDataset".
            package typealias Output = Google_Cloud_Bigquery_V2_Dataset
            /// Descriptor for "GetDataset".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.bigquery.v2.DatasetService"),
                method: "GetDataset"
            )
        }
        /// Namespace for "InsertDataset" metadata.
        package enum InsertDataset {
            /// Request type for "InsertDataset".
            package typealias Input = Google_Cloud_Bigquery_V2_InsertDatasetRequest
            /// Response type for "InsertDataset".
            package typealias Output = Google_Cloud_Bigquery_V2_Dataset
            /// Descriptor for "InsertDataset".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.bigquery.v2.DatasetService"),
                method: "InsertDataset"
            )
        }
        /// Namespace for "PatchDataset" metadata.
        package enum PatchDataset {
            /// Request type for "PatchDataset".
            package typealias Input = Google_Cloud_Bigquery_V2_UpdateOrPatchDatasetRequest
            /// Response type for "PatchDataset".
            package typealias Output = Google_Cloud_Bigquery_V2_Dataset
            /// Descriptor for "PatchDataset".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.bigquery.v2.DatasetService"),
                method: "PatchDataset"
            )
        }
        /// Namespace for "UpdateDataset" metadata.
        package enum UpdateDataset {
            /// Request type for "UpdateDataset".
            package typealias Input = Google_Cloud_Bigquery_V2_UpdateOrPatchDatasetRequest
            /// Response type for "UpdateDataset".
            package typealias Output = Google_Cloud_Bigquery_V2_Dataset
            /// Descriptor for "UpdateDataset".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.bigquery.v2.DatasetService"),
                method: "UpdateDataset"
            )
        }
        /// Namespace for "DeleteDataset" metadata.
        package enum DeleteDataset {
            /// Request type for "DeleteDataset".
            package typealias Input = Google_Cloud_Bigquery_V2_DeleteDatasetRequest
            /// Response type for "DeleteDataset".
            package typealias Output = SwiftProtobuf.Google_Protobuf_Empty
            /// Descriptor for "DeleteDataset".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.bigquery.v2.DatasetService"),
                method: "DeleteDataset"
            )
        }
        /// Namespace for "ListDatasets" metadata.
        package enum ListDatasets {
            /// Request type for "ListDatasets".
            package typealias Input = Google_Cloud_Bigquery_V2_ListDatasetsRequest
            /// Response type for "ListDatasets".
            package typealias Output = Google_Cloud_Bigquery_V2_DatasetList
            /// Descriptor for "ListDatasets".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.bigquery.v2.DatasetService"),
                method: "ListDatasets"
            )
        }
        /// Namespace for "UndeleteDataset" metadata.
        package enum UndeleteDataset {
            /// Request type for "UndeleteDataset".
            package typealias Input = Google_Cloud_Bigquery_V2_UndeleteDatasetRequest
            /// Response type for "UndeleteDataset".
            package typealias Output = Google_Cloud_Bigquery_V2_Dataset
            /// Descriptor for "UndeleteDataset".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.bigquery.v2.DatasetService"),
                method: "UndeleteDataset"
            )
        }
        /// Descriptors for all methods in the "google.cloud.bigquery.v2.DatasetService" service.
        package static let descriptors: [GRPCCore.MethodDescriptor] = [
            GetDataset.descriptor,
            InsertDataset.descriptor,
            PatchDataset.descriptor,
            UpdateDataset.descriptor,
            DeleteDataset.descriptor,
            ListDatasets.descriptor,
            UndeleteDataset.descriptor
        ]
    }
}

extension GRPCCore.ServiceDescriptor {
    /// Service descriptor for the "google.cloud.bigquery.v2.DatasetService" service.
    package static let google_cloud_bigquery_v2_DatasetService = GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.bigquery.v2.DatasetService")
}

// MARK: google.cloud.bigquery.v2.DatasetService (client)

extension Google_Cloud_Bigquery_V2_DatasetService {
    /// Generated client protocol for the "google.cloud.bigquery.v2.DatasetService" service.
    ///
    /// You don't need to implement this protocol directly, use the generated
    /// implementation, ``Client``.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > DatasetService provides methods for managing BigQuery datasets.
    package protocol ClientProtocol: Sendable {
        /// Call the "GetDataset" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Returns the dataset specified by datasetID.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Bigquery_V2_GetDatasetRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Bigquery_V2_GetDatasetRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Bigquery_V2_Dataset` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getDataset<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_GetDatasetRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Bigquery_V2_GetDatasetRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Bigquery_V2_Dataset>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_V2_Dataset>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "InsertDataset" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Creates a new empty dataset.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Bigquery_V2_InsertDatasetRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Bigquery_V2_InsertDatasetRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Bigquery_V2_Dataset` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func insertDataset<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_InsertDatasetRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Bigquery_V2_InsertDatasetRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Bigquery_V2_Dataset>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_V2_Dataset>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "PatchDataset" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Updates information in an existing dataset. The update method replaces the
        /// > entire dataset resource, whereas the patch method only replaces fields that
        /// > are provided in the submitted dataset resource.
        /// > This method supports RFC5789 patch semantics.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Bigquery_V2_UpdateOrPatchDatasetRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Bigquery_V2_UpdateOrPatchDatasetRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Bigquery_V2_Dataset` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func patchDataset<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_UpdateOrPatchDatasetRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Bigquery_V2_UpdateOrPatchDatasetRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Bigquery_V2_Dataset>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_V2_Dataset>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "UpdateDataset" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Updates information in an existing dataset. The update method replaces the
        /// > entire dataset resource, whereas the patch method only replaces fields that
        /// > are provided in the submitted dataset resource.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Bigquery_V2_UpdateOrPatchDatasetRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Bigquery_V2_UpdateOrPatchDatasetRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Bigquery_V2_Dataset` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func updateDataset<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_UpdateOrPatchDatasetRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Bigquery_V2_UpdateOrPatchDatasetRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Bigquery_V2_Dataset>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_V2_Dataset>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "DeleteDataset" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Deletes the dataset specified by the datasetId value. Before you can delete
        /// > a dataset, you must delete all its tables, either manually or by specifying
        /// > deleteContents. Immediately after deletion, you can create another dataset
        /// > with the same name.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Bigquery_V2_DeleteDatasetRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Bigquery_V2_DeleteDatasetRequest` messages.
        ///   - deserializer: A deserializer for `SwiftProtobuf.Google_Protobuf_Empty` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func deleteDataset<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_DeleteDatasetRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Bigquery_V2_DeleteDatasetRequest>,
            deserializer: some GRPCCore.MessageDeserializer<SwiftProtobuf.Google_Protobuf_Empty>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "ListDatasets" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Lists all datasets in the specified project to which the user has been
        /// > granted the READER dataset role.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Bigquery_V2_ListDatasetsRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Bigquery_V2_ListDatasetsRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Bigquery_V2_DatasetList` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func listDatasets<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_ListDatasetsRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Bigquery_V2_ListDatasetsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Bigquery_V2_DatasetList>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_V2_DatasetList>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "UndeleteDataset" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Undeletes a dataset which is within time travel window based on datasetId.
        /// > If a time is specified, the dataset version deleted at that time is
        /// > undeleted, else the last live version is undeleted.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Bigquery_V2_UndeleteDatasetRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Bigquery_V2_UndeleteDatasetRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Bigquery_V2_Dataset` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func undeleteDataset<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_UndeleteDatasetRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Bigquery_V2_UndeleteDatasetRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Bigquery_V2_Dataset>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_V2_Dataset>) async throws -> Result
        ) async throws -> Result where Result: Sendable
    }

    /// Generated client for the "google.cloud.bigquery.v2.DatasetService" service.
    ///
    /// The ``Client`` provides an implementation of ``ClientProtocol`` which wraps
    /// a `GRPCCore.GRPCCClient`. The underlying `GRPCClient` provides the long-lived
    /// means of communication with the remote peer.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > DatasetService provides methods for managing BigQuery datasets.
    package struct Client: ClientProtocol {
        private let client: GRPCCore.GRPCClient

        /// Creates a new client wrapping the provided `GRPCCore.GRPCClient`.
        ///
        /// - Parameters:
        ///   - client: A `GRPCCore.GRPCClient` providing a communication channel to the service.
        package init(wrapping client: GRPCCore.GRPCClient) {
            self.client = client
        }

        /// Call the "GetDataset" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Returns the dataset specified by datasetID.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Bigquery_V2_GetDatasetRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Bigquery_V2_GetDatasetRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Bigquery_V2_Dataset` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func getDataset<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_GetDatasetRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Bigquery_V2_GetDatasetRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Bigquery_V2_Dataset>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_V2_Dataset>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Bigquery_V2_DatasetService.Method.GetDataset.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "InsertDataset" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Creates a new empty dataset.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Bigquery_V2_InsertDatasetRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Bigquery_V2_InsertDatasetRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Bigquery_V2_Dataset` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func insertDataset<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_InsertDatasetRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Bigquery_V2_InsertDatasetRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Bigquery_V2_Dataset>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_V2_Dataset>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Bigquery_V2_DatasetService.Method.InsertDataset.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "PatchDataset" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Updates information in an existing dataset. The update method replaces the
        /// > entire dataset resource, whereas the patch method only replaces fields that
        /// > are provided in the submitted dataset resource.
        /// > This method supports RFC5789 patch semantics.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Bigquery_V2_UpdateOrPatchDatasetRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Bigquery_V2_UpdateOrPatchDatasetRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Bigquery_V2_Dataset` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func patchDataset<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_UpdateOrPatchDatasetRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Bigquery_V2_UpdateOrPatchDatasetRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Bigquery_V2_Dataset>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_V2_Dataset>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Bigquery_V2_DatasetService.Method.PatchDataset.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "UpdateDataset" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Updates information in an existing dataset. The update method replaces the
        /// > entire dataset resource, whereas the patch method only replaces fields that
        /// > are provided in the submitted dataset resource.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Bigquery_V2_UpdateOrPatchDatasetRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Bigquery_V2_UpdateOrPatchDatasetRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Bigquery_V2_Dataset` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func updateDataset<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_UpdateOrPatchDatasetRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Bigquery_V2_UpdateOrPatchDatasetRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Bigquery_V2_Dataset>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_V2_Dataset>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Bigquery_V2_DatasetService.Method.UpdateDataset.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "DeleteDataset" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Deletes the dataset specified by the datasetId value. Before you can delete
        /// > a dataset, you must delete all its tables, either manually or by specifying
        /// > deleteContents. Immediately after deletion, you can create another dataset
        /// > with the same name.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Bigquery_V2_DeleteDatasetRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Bigquery_V2_DeleteDatasetRequest` messages.
        ///   - deserializer: A deserializer for `SwiftProtobuf.Google_Protobuf_Empty` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func deleteDataset<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_DeleteDatasetRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Bigquery_V2_DeleteDatasetRequest>,
            deserializer: some GRPCCore.MessageDeserializer<SwiftProtobuf.Google_Protobuf_Empty>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Bigquery_V2_DatasetService.Method.DeleteDataset.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "ListDatasets" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Lists all datasets in the specified project to which the user has been
        /// > granted the READER dataset role.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Bigquery_V2_ListDatasetsRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Bigquery_V2_ListDatasetsRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Bigquery_V2_DatasetList` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func listDatasets<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_ListDatasetsRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Bigquery_V2_ListDatasetsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Bigquery_V2_DatasetList>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_V2_DatasetList>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Bigquery_V2_DatasetService.Method.ListDatasets.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "UndeleteDataset" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Undeletes a dataset which is within time travel window based on datasetId.
        /// > If a time is specified, the dataset version deleted at that time is
        /// > undeleted, else the last live version is undeleted.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Bigquery_V2_UndeleteDatasetRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Bigquery_V2_UndeleteDatasetRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Bigquery_V2_Dataset` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func undeleteDataset<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_UndeleteDatasetRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Bigquery_V2_UndeleteDatasetRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Bigquery_V2_Dataset>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_V2_Dataset>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Bigquery_V2_DatasetService.Method.UndeleteDataset.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }
    }
}

// Helpers providing default arguments to 'ClientProtocol' methods.
extension Google_Cloud_Bigquery_V2_DatasetService.ClientProtocol {
    /// Call the "GetDataset" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Returns the dataset specified by datasetID.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Bigquery_V2_GetDatasetRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func getDataset<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_GetDatasetRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_V2_Dataset>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getDataset(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Bigquery_V2_GetDatasetRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Bigquery_V2_Dataset>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "InsertDataset" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Creates a new empty dataset.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Bigquery_V2_InsertDatasetRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func insertDataset<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_InsertDatasetRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_V2_Dataset>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.insertDataset(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Bigquery_V2_InsertDatasetRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Bigquery_V2_Dataset>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "PatchDataset" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Updates information in an existing dataset. The update method replaces the
    /// > entire dataset resource, whereas the patch method only replaces fields that
    /// > are provided in the submitted dataset resource.
    /// > This method supports RFC5789 patch semantics.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Bigquery_V2_UpdateOrPatchDatasetRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func patchDataset<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_UpdateOrPatchDatasetRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_V2_Dataset>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.patchDataset(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Bigquery_V2_UpdateOrPatchDatasetRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Bigquery_V2_Dataset>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UpdateDataset" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Updates information in an existing dataset. The update method replaces the
    /// > entire dataset resource, whereas the patch method only replaces fields that
    /// > are provided in the submitted dataset resource.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Bigquery_V2_UpdateOrPatchDatasetRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func updateDataset<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_UpdateOrPatchDatasetRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_V2_Dataset>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.updateDataset(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Bigquery_V2_UpdateOrPatchDatasetRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Bigquery_V2_Dataset>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DeleteDataset" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Deletes the dataset specified by the datasetId value. Before you can delete
    /// > a dataset, you must delete all its tables, either manually or by specifying
    /// > deleteContents. Immediately after deletion, you can create another dataset
    /// > with the same name.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Bigquery_V2_DeleteDatasetRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func deleteDataset<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_DeleteDatasetRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.deleteDataset(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Bigquery_V2_DeleteDatasetRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListDatasets" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Lists all datasets in the specified project to which the user has been
    /// > granted the READER dataset role.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Bigquery_V2_ListDatasetsRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func listDatasets<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_ListDatasetsRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_V2_DatasetList>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.listDatasets(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Bigquery_V2_ListDatasetsRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Bigquery_V2_DatasetList>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UndeleteDataset" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Undeletes a dataset which is within time travel window based on datasetId.
    /// > If a time is specified, the dataset version deleted at that time is
    /// > undeleted, else the last live version is undeleted.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Bigquery_V2_UndeleteDatasetRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func undeleteDataset<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_UndeleteDatasetRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_V2_Dataset>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.undeleteDataset(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Bigquery_V2_UndeleteDatasetRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Bigquery_V2_Dataset>(),
            options: options,
            onResponse: handleResponse
        )
    }
}

// Helpers providing sugared APIs for 'ClientProtocol' methods.
extension Google_Cloud_Bigquery_V2_DatasetService.ClientProtocol {
    /// Call the "GetDataset" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Returns the dataset specified by datasetID.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func getDataset<Result>(
        _ message: Google_Cloud_Bigquery_V2_GetDatasetRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_V2_Dataset>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_GetDatasetRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getDataset(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "InsertDataset" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Creates a new empty dataset.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func insertDataset<Result>(
        _ message: Google_Cloud_Bigquery_V2_InsertDatasetRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_V2_Dataset>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_InsertDatasetRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.insertDataset(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "PatchDataset" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Updates information in an existing dataset. The update method replaces the
    /// > entire dataset resource, whereas the patch method only replaces fields that
    /// > are provided in the submitted dataset resource.
    /// > This method supports RFC5789 patch semantics.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func patchDataset<Result>(
        _ message: Google_Cloud_Bigquery_V2_UpdateOrPatchDatasetRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_V2_Dataset>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_UpdateOrPatchDatasetRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.patchDataset(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UpdateDataset" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Updates information in an existing dataset. The update method replaces the
    /// > entire dataset resource, whereas the patch method only replaces fields that
    /// > are provided in the submitted dataset resource.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func updateDataset<Result>(
        _ message: Google_Cloud_Bigquery_V2_UpdateOrPatchDatasetRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_V2_Dataset>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_UpdateOrPatchDatasetRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.updateDataset(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DeleteDataset" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Deletes the dataset specified by the datasetId value. Before you can delete
    /// > a dataset, you must delete all its tables, either manually or by specifying
    /// > deleteContents. Immediately after deletion, you can create another dataset
    /// > with the same name.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func deleteDataset<Result>(
        _ message: Google_Cloud_Bigquery_V2_DeleteDatasetRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_DeleteDatasetRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.deleteDataset(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListDatasets" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Lists all datasets in the specified project to which the user has been
    /// > granted the READER dataset role.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func listDatasets<Result>(
        _ message: Google_Cloud_Bigquery_V2_ListDatasetsRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_V2_DatasetList>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_ListDatasetsRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.listDatasets(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UndeleteDataset" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Undeletes a dataset which is within time travel window based on datasetId.
    /// > If a time is specified, the dataset version deleted at that time is
    /// > undeleted, else the last live version is undeleted.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func undeleteDataset<Result>(
        _ message: Google_Cloud_Bigquery_V2_UndeleteDatasetRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_V2_Dataset>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_UndeleteDatasetRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.undeleteDataset(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }
}