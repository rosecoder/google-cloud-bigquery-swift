// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/bigquery/v2/row_access_policy.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Request message for the ListRowAccessPolicies method.
package struct Google_Cloud_Bigquery_V2_ListRowAccessPoliciesRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Required. Project ID of the row access policies to list.
  package var projectID: String = String()

  /// Required. Dataset ID of row access policies to list.
  package var datasetID: String = String()

  /// Required. Table ID of the table to list row access policies.
  package var tableID: String = String()

  /// Page token, returned by a previous call, to request the next page of
  /// results.
  package var pageToken: String = String()

  /// The maximum number of results to return in a single response page. Leverage
  /// the page tokens to iterate through the entire collection.
  package var pageSize: Int32 = 0

  package var unknownFields = SwiftProtobuf.UnknownStorage()

  package init() {}
}

/// Response message for the ListRowAccessPolicies method.
package struct Google_Cloud_Bigquery_V2_ListRowAccessPoliciesResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Row access policies on the requested table.
  package var rowAccessPolicies: [Google_Cloud_Bigquery_V2_RowAccessPolicy] = []

  /// A token to request the next page of results.
  package var nextPageToken: String = String()

  package var unknownFields = SwiftProtobuf.UnknownStorage()

  package init() {}
}

/// Represents access on a subset of rows on the specified table, defined by its
/// filter predicate. Access to the subset of rows is controlled by its IAM
/// policy.
package struct Google_Cloud_Bigquery_V2_RowAccessPolicy: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Output only. A hash of this resource.
  package var etag: String = String()

  /// Required. Reference describing the ID of this row access policy.
  package var rowAccessPolicyReference: Google_Cloud_Bigquery_V2_RowAccessPolicyReference {
    get {return _rowAccessPolicyReference ?? Google_Cloud_Bigquery_V2_RowAccessPolicyReference()}
    set {_rowAccessPolicyReference = newValue}
  }
  /// Returns true if `rowAccessPolicyReference` has been explicitly set.
  package var hasRowAccessPolicyReference: Bool {return self._rowAccessPolicyReference != nil}
  /// Clears the value of `rowAccessPolicyReference`. Subsequent reads from it will return its default value.
  package mutating func clearRowAccessPolicyReference() {self._rowAccessPolicyReference = nil}

  /// Required. A SQL boolean expression that represents the rows defined by this
  /// row access policy, similar to the boolean expression in a WHERE clause of a
  /// SELECT query on a table.
  /// References to other tables, routines, and temporary functions are not
  /// supported.
  ///
  /// Examples: region="EU"
  ///           date_field = CAST('2019-9-27' as DATE)
  ///           nullable_field is not NULL
  ///           numeric_field BETWEEN 1.0 AND 5.0
  package var filterPredicate: String = String()

  /// Output only. The time when this row access policy was created, in
  /// milliseconds since the epoch.
  package var creationTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _creationTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_creationTime = newValue}
  }
  /// Returns true if `creationTime` has been explicitly set.
  package var hasCreationTime: Bool {return self._creationTime != nil}
  /// Clears the value of `creationTime`. Subsequent reads from it will return its default value.
  package mutating func clearCreationTime() {self._creationTime = nil}

  /// Output only. The time when this row access policy was last modified, in
  /// milliseconds since the epoch.
  package var lastModifiedTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _lastModifiedTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_lastModifiedTime = newValue}
  }
  /// Returns true if `lastModifiedTime` has been explicitly set.
  package var hasLastModifiedTime: Bool {return self._lastModifiedTime != nil}
  /// Clears the value of `lastModifiedTime`. Subsequent reads from it will return its default value.
  package mutating func clearLastModifiedTime() {self._lastModifiedTime = nil}

  package var unknownFields = SwiftProtobuf.UnknownStorage()

  package init() {}

  fileprivate var _rowAccessPolicyReference: Google_Cloud_Bigquery_V2_RowAccessPolicyReference? = nil
  fileprivate var _creationTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _lastModifiedTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.cloud.bigquery.v2"

extension Google_Cloud_Bigquery_V2_ListRowAccessPoliciesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = _protobuf_package + ".ListRowAccessPoliciesRequest"
  package static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "project_id"),
    2: .standard(proto: "dataset_id"),
    3: .standard(proto: "table_id"),
    4: .standard(proto: "page_token"),
    5: .standard(proto: "page_size"),
  ]

  package mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.projectID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.datasetID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.tableID) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.pageToken) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self.pageSize) }()
      default: break
      }
    }
  }

  package func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.projectID.isEmpty {
      try visitor.visitSingularStringField(value: self.projectID, fieldNumber: 1)
    }
    if !self.datasetID.isEmpty {
      try visitor.visitSingularStringField(value: self.datasetID, fieldNumber: 2)
    }
    if !self.tableID.isEmpty {
      try visitor.visitSingularStringField(value: self.tableID, fieldNumber: 3)
    }
    if !self.pageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.pageToken, fieldNumber: 4)
    }
    if self.pageSize != 0 {
      try visitor.visitSingularInt32Field(value: self.pageSize, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: Google_Cloud_Bigquery_V2_ListRowAccessPoliciesRequest, rhs: Google_Cloud_Bigquery_V2_ListRowAccessPoliciesRequest) -> Bool {
    if lhs.projectID != rhs.projectID {return false}
    if lhs.datasetID != rhs.datasetID {return false}
    if lhs.tableID != rhs.tableID {return false}
    if lhs.pageToken != rhs.pageToken {return false}
    if lhs.pageSize != rhs.pageSize {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Bigquery_V2_ListRowAccessPoliciesResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = _protobuf_package + ".ListRowAccessPoliciesResponse"
  package static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "row_access_policies"),
    2: .standard(proto: "next_page_token"),
  ]

  package mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.rowAccessPolicies) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.nextPageToken) }()
      default: break
      }
    }
  }

  package func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.rowAccessPolicies.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.rowAccessPolicies, fieldNumber: 1)
    }
    if !self.nextPageToken.isEmpty {
      try visitor.visitSingularStringField(value: self.nextPageToken, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: Google_Cloud_Bigquery_V2_ListRowAccessPoliciesResponse, rhs: Google_Cloud_Bigquery_V2_ListRowAccessPoliciesResponse) -> Bool {
    if lhs.rowAccessPolicies != rhs.rowAccessPolicies {return false}
    if lhs.nextPageToken != rhs.nextPageToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloud_Bigquery_V2_RowAccessPolicy: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  package static let protoMessageName: String = _protobuf_package + ".RowAccessPolicy"
  package static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "etag"),
    2: .standard(proto: "row_access_policy_reference"),
    3: .standard(proto: "filter_predicate"),
    4: .standard(proto: "creation_time"),
    5: .standard(proto: "last_modified_time"),
  ]

  package mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.etag) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._rowAccessPolicyReference) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.filterPredicate) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._creationTime) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._lastModifiedTime) }()
      default: break
      }
    }
  }

  package func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.etag.isEmpty {
      try visitor.visitSingularStringField(value: self.etag, fieldNumber: 1)
    }
    try { if let v = self._rowAccessPolicyReference {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.filterPredicate.isEmpty {
      try visitor.visitSingularStringField(value: self.filterPredicate, fieldNumber: 3)
    }
    try { if let v = self._creationTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._lastModifiedTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  package static func ==(lhs: Google_Cloud_Bigquery_V2_RowAccessPolicy, rhs: Google_Cloud_Bigquery_V2_RowAccessPolicy) -> Bool {
    if lhs.etag != rhs.etag {return false}
    if lhs._rowAccessPolicyReference != rhs._rowAccessPolicyReference {return false}
    if lhs.filterPredicate != rhs.filterPredicate {return false}
    if lhs._creationTime != rhs._creationTime {return false}
    if lhs._lastModifiedTime != rhs._lastModifiedTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
