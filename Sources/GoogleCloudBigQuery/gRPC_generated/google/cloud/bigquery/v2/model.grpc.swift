// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the gRPC Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/bigquery/v2/model.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/grpc/grpc-swift

import GRPCCore
import GRPCProtobuf
import SwiftProtobuf

// MARK: - google.cloud.bigquery.v2.ModelService

/// Namespace containing generated types for the "google.cloud.bigquery.v2.ModelService" service.
package enum Google_Cloud_Bigquery_V2_ModelService {
    /// Service descriptor for the "google.cloud.bigquery.v2.ModelService" service.
    package static let descriptor = GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.bigquery.v2.ModelService")
    /// Namespace for method metadata.
    package enum Method {
        /// Namespace for "GetModel" metadata.
        package enum GetModel {
            /// Request type for "GetModel".
            package typealias Input = Google_Cloud_Bigquery_V2_GetModelRequest
            /// Response type for "GetModel".
            package typealias Output = Google_Cloud_Bigquery_V2_Model
            /// Descriptor for "GetModel".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.bigquery.v2.ModelService"),
                method: "GetModel"
            )
        }
        /// Namespace for "ListModels" metadata.
        package enum ListModels {
            /// Request type for "ListModels".
            package typealias Input = Google_Cloud_Bigquery_V2_ListModelsRequest
            /// Response type for "ListModels".
            package typealias Output = Google_Cloud_Bigquery_V2_ListModelsResponse
            /// Descriptor for "ListModels".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.bigquery.v2.ModelService"),
                method: "ListModels"
            )
        }
        /// Namespace for "PatchModel" metadata.
        package enum PatchModel {
            /// Request type for "PatchModel".
            package typealias Input = Google_Cloud_Bigquery_V2_PatchModelRequest
            /// Response type for "PatchModel".
            package typealias Output = Google_Cloud_Bigquery_V2_Model
            /// Descriptor for "PatchModel".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.bigquery.v2.ModelService"),
                method: "PatchModel"
            )
        }
        /// Namespace for "DeleteModel" metadata.
        package enum DeleteModel {
            /// Request type for "DeleteModel".
            package typealias Input = Google_Cloud_Bigquery_V2_DeleteModelRequest
            /// Response type for "DeleteModel".
            package typealias Output = SwiftProtobuf.Google_Protobuf_Empty
            /// Descriptor for "DeleteModel".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.bigquery.v2.ModelService"),
                method: "DeleteModel"
            )
        }
        /// Descriptors for all methods in the "google.cloud.bigquery.v2.ModelService" service.
        package static let descriptors: [GRPCCore.MethodDescriptor] = [
            GetModel.descriptor,
            ListModels.descriptor,
            PatchModel.descriptor,
            DeleteModel.descriptor
        ]
    }
}

extension GRPCCore.ServiceDescriptor {
    /// Service descriptor for the "google.cloud.bigquery.v2.ModelService" service.
    package static let google_cloud_bigquery_v2_ModelService = GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.bigquery.v2.ModelService")
}

// MARK: google.cloud.bigquery.v2.ModelService (client)

extension Google_Cloud_Bigquery_V2_ModelService {
    /// Generated client protocol for the "google.cloud.bigquery.v2.ModelService" service.
    ///
    /// You don't need to implement this protocol directly, use the generated
    /// implementation, ``Client``.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Model Service for BigQuery ML
    package protocol ClientProtocol: Sendable {
        /// Call the "GetModel" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Gets the specified model resource by model ID.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Bigquery_V2_GetModelRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Bigquery_V2_GetModelRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Bigquery_V2_Model` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getModel<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_GetModelRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Bigquery_V2_GetModelRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Bigquery_V2_Model>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_V2_Model>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "ListModels" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Lists all models in the specified dataset. Requires the READER dataset
        /// > role. After retrieving the list of models, you can get information about a
        /// > particular model by calling the models.get method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Bigquery_V2_ListModelsRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Bigquery_V2_ListModelsRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Bigquery_V2_ListModelsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func listModels<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_ListModelsRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Bigquery_V2_ListModelsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Bigquery_V2_ListModelsResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_V2_ListModelsResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "PatchModel" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Patch specific fields in the specified model.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Bigquery_V2_PatchModelRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Bigquery_V2_PatchModelRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Bigquery_V2_Model` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func patchModel<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_PatchModelRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Bigquery_V2_PatchModelRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Bigquery_V2_Model>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_V2_Model>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "DeleteModel" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Deletes the model specified by modelId from the dataset.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Bigquery_V2_DeleteModelRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Bigquery_V2_DeleteModelRequest` messages.
        ///   - deserializer: A deserializer for `SwiftProtobuf.Google_Protobuf_Empty` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func deleteModel<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_DeleteModelRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Bigquery_V2_DeleteModelRequest>,
            deserializer: some GRPCCore.MessageDeserializer<SwiftProtobuf.Google_Protobuf_Empty>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result
        ) async throws -> Result where Result: Sendable
    }

    /// Generated client for the "google.cloud.bigquery.v2.ModelService" service.
    ///
    /// The ``Client`` provides an implementation of ``ClientProtocol`` which wraps
    /// a `GRPCCore.GRPCCClient`. The underlying `GRPCClient` provides the long-lived
    /// means of communication with the remote peer.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Model Service for BigQuery ML
    package struct Client: ClientProtocol {
        private let client: GRPCCore.GRPCClient

        /// Creates a new client wrapping the provided `GRPCCore.GRPCClient`.
        ///
        /// - Parameters:
        ///   - client: A `GRPCCore.GRPCClient` providing a communication channel to the service.
        package init(wrapping client: GRPCCore.GRPCClient) {
            self.client = client
        }

        /// Call the "GetModel" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Gets the specified model resource by model ID.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Bigquery_V2_GetModelRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Bigquery_V2_GetModelRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Bigquery_V2_Model` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func getModel<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_GetModelRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Bigquery_V2_GetModelRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Bigquery_V2_Model>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_V2_Model>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Bigquery_V2_ModelService.Method.GetModel.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "ListModels" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Lists all models in the specified dataset. Requires the READER dataset
        /// > role. After retrieving the list of models, you can get information about a
        /// > particular model by calling the models.get method.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Bigquery_V2_ListModelsRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Bigquery_V2_ListModelsRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Bigquery_V2_ListModelsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func listModels<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_ListModelsRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Bigquery_V2_ListModelsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Bigquery_V2_ListModelsResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_V2_ListModelsResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Bigquery_V2_ModelService.Method.ListModels.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "PatchModel" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Patch specific fields in the specified model.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Bigquery_V2_PatchModelRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Bigquery_V2_PatchModelRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Bigquery_V2_Model` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func patchModel<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_PatchModelRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Bigquery_V2_PatchModelRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Bigquery_V2_Model>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_V2_Model>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Bigquery_V2_ModelService.Method.PatchModel.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "DeleteModel" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Deletes the model specified by modelId from the dataset.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Bigquery_V2_DeleteModelRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Bigquery_V2_DeleteModelRequest` messages.
        ///   - deserializer: A deserializer for `SwiftProtobuf.Google_Protobuf_Empty` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func deleteModel<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_DeleteModelRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Bigquery_V2_DeleteModelRequest>,
            deserializer: some GRPCCore.MessageDeserializer<SwiftProtobuf.Google_Protobuf_Empty>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Bigquery_V2_ModelService.Method.DeleteModel.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }
    }
}

// Helpers providing default arguments to 'ClientProtocol' methods.
extension Google_Cloud_Bigquery_V2_ModelService.ClientProtocol {
    /// Call the "GetModel" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Gets the specified model resource by model ID.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Bigquery_V2_GetModelRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func getModel<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_GetModelRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_V2_Model>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getModel(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Bigquery_V2_GetModelRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Bigquery_V2_Model>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListModels" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Lists all models in the specified dataset. Requires the READER dataset
    /// > role. After retrieving the list of models, you can get information about a
    /// > particular model by calling the models.get method.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Bigquery_V2_ListModelsRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func listModels<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_ListModelsRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_V2_ListModelsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.listModels(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Bigquery_V2_ListModelsRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Bigquery_V2_ListModelsResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "PatchModel" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Patch specific fields in the specified model.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Bigquery_V2_PatchModelRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func patchModel<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_PatchModelRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_V2_Model>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.patchModel(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Bigquery_V2_PatchModelRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Bigquery_V2_Model>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DeleteModel" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Deletes the model specified by modelId from the dataset.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Bigquery_V2_DeleteModelRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func deleteModel<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_DeleteModelRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.deleteModel(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Bigquery_V2_DeleteModelRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
            options: options,
            onResponse: handleResponse
        )
    }
}

// Helpers providing sugared APIs for 'ClientProtocol' methods.
extension Google_Cloud_Bigquery_V2_ModelService.ClientProtocol {
    /// Call the "GetModel" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Gets the specified model resource by model ID.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func getModel<Result>(
        _ message: Google_Cloud_Bigquery_V2_GetModelRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_V2_Model>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_GetModelRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getModel(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListModels" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Lists all models in the specified dataset. Requires the READER dataset
    /// > role. After retrieving the list of models, you can get information about a
    /// > particular model by calling the models.get method.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func listModels<Result>(
        _ message: Google_Cloud_Bigquery_V2_ListModelsRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_V2_ListModelsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_ListModelsRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.listModels(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "PatchModel" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Patch specific fields in the specified model.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func patchModel<Result>(
        _ message: Google_Cloud_Bigquery_V2_PatchModelRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_V2_Model>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_PatchModelRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.patchModel(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DeleteModel" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Deletes the model specified by modelId from the dataset.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func deleteModel<Result>(
        _ message: Google_Cloud_Bigquery_V2_DeleteModelRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_DeleteModelRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.deleteModel(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }
}