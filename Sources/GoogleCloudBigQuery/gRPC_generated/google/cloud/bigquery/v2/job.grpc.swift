// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the gRPC Swift generator plugin for the protocol buffer compiler.
// Source: google/cloud/bigquery/v2/job.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/grpc/grpc-swift

import GRPCCore
import GRPCProtobuf
import SwiftProtobuf

// MARK: - google.cloud.bigquery.v2.JobService

/// Namespace containing generated types for the "google.cloud.bigquery.v2.JobService" service.
package enum Google_Cloud_Bigquery_V2_JobService {
    /// Service descriptor for the "google.cloud.bigquery.v2.JobService" service.
    package static let descriptor = GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.bigquery.v2.JobService")
    /// Namespace for method metadata.
    package enum Method {
        /// Namespace for "CancelJob" metadata.
        package enum CancelJob {
            /// Request type for "CancelJob".
            package typealias Input = Google_Cloud_Bigquery_V2_CancelJobRequest
            /// Response type for "CancelJob".
            package typealias Output = Google_Cloud_Bigquery_V2_JobCancelResponse
            /// Descriptor for "CancelJob".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.bigquery.v2.JobService"),
                method: "CancelJob"
            )
        }
        /// Namespace for "GetJob" metadata.
        package enum GetJob {
            /// Request type for "GetJob".
            package typealias Input = Google_Cloud_Bigquery_V2_GetJobRequest
            /// Response type for "GetJob".
            package typealias Output = Google_Cloud_Bigquery_V2_Job
            /// Descriptor for "GetJob".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.bigquery.v2.JobService"),
                method: "GetJob"
            )
        }
        /// Namespace for "InsertJob" metadata.
        package enum InsertJob {
            /// Request type for "InsertJob".
            package typealias Input = Google_Cloud_Bigquery_V2_InsertJobRequest
            /// Response type for "InsertJob".
            package typealias Output = Google_Cloud_Bigquery_V2_Job
            /// Descriptor for "InsertJob".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.bigquery.v2.JobService"),
                method: "InsertJob"
            )
        }
        /// Namespace for "DeleteJob" metadata.
        package enum DeleteJob {
            /// Request type for "DeleteJob".
            package typealias Input = Google_Cloud_Bigquery_V2_DeleteJobRequest
            /// Response type for "DeleteJob".
            package typealias Output = SwiftProtobuf.Google_Protobuf_Empty
            /// Descriptor for "DeleteJob".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.bigquery.v2.JobService"),
                method: "DeleteJob"
            )
        }
        /// Namespace for "ListJobs" metadata.
        package enum ListJobs {
            /// Request type for "ListJobs".
            package typealias Input = Google_Cloud_Bigquery_V2_ListJobsRequest
            /// Response type for "ListJobs".
            package typealias Output = Google_Cloud_Bigquery_V2_JobList
            /// Descriptor for "ListJobs".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.bigquery.v2.JobService"),
                method: "ListJobs"
            )
        }
        /// Namespace for "GetQueryResults" metadata.
        package enum GetQueryResults {
            /// Request type for "GetQueryResults".
            package typealias Input = Google_Cloud_Bigquery_V2_GetQueryResultsRequest
            /// Response type for "GetQueryResults".
            package typealias Output = Google_Cloud_Bigquery_V2_GetQueryResultsResponse
            /// Descriptor for "GetQueryResults".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.bigquery.v2.JobService"),
                method: "GetQueryResults"
            )
        }
        /// Namespace for "Query" metadata.
        package enum Query {
            /// Request type for "Query".
            package typealias Input = Google_Cloud_Bigquery_V2_PostQueryRequest
            /// Response type for "Query".
            package typealias Output = Google_Cloud_Bigquery_V2_QueryResponse
            /// Descriptor for "Query".
            package static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.bigquery.v2.JobService"),
                method: "Query"
            )
        }
        /// Descriptors for all methods in the "google.cloud.bigquery.v2.JobService" service.
        package static let descriptors: [GRPCCore.MethodDescriptor] = [
            CancelJob.descriptor,
            GetJob.descriptor,
            InsertJob.descriptor,
            DeleteJob.descriptor,
            ListJobs.descriptor,
            GetQueryResults.descriptor,
            Query.descriptor
        ]
    }
}

extension GRPCCore.ServiceDescriptor {
    /// Service descriptor for the "google.cloud.bigquery.v2.JobService" service.
    package static let google_cloud_bigquery_v2_JobService = GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.cloud.bigquery.v2.JobService")
}

// MARK: google.cloud.bigquery.v2.JobService (client)

extension Google_Cloud_Bigquery_V2_JobService {
    /// Generated client protocol for the "google.cloud.bigquery.v2.JobService" service.
    ///
    /// You don't need to implement this protocol directly, use the generated
    /// implementation, ``Client``.
    package protocol ClientProtocol: Sendable {
        /// Call the "CancelJob" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Requests that a job be cancelled. This call will return immediately, and
        /// > the client will need to poll for the job status to see if the cancel
        /// > completed successfully. Cancelled jobs may still incur costs.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Bigquery_V2_CancelJobRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Bigquery_V2_CancelJobRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Bigquery_V2_JobCancelResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func cancelJob<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_CancelJobRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Bigquery_V2_CancelJobRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Bigquery_V2_JobCancelResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_V2_JobCancelResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetJob" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Returns information about a specific job. Job information is available for
        /// > a six month period after creation. Requires that you're the person who ran
        /// > the job, or have the Is Owner project role.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Bigquery_V2_GetJobRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Bigquery_V2_GetJobRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Bigquery_V2_Job` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getJob<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_GetJobRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Bigquery_V2_GetJobRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Bigquery_V2_Job>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_V2_Job>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "InsertJob" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Starts a new asynchronous job.
        /// > 
        /// > This API has two different kinds of endpoint URIs, as this method supports
        /// > a variety of use cases.
        /// > 
        /// > * The *Metadata* URI is used for most interactions, as it accepts the job
        /// >   configuration directly.
        /// > * The *Upload* URI is ONLY for the case when you're sending both a load job
        /// >   configuration and a data stream together.  In this case, the Upload URI
        /// >   accepts the job configuration and the data as two distinct multipart MIME
        /// >   parts.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Bigquery_V2_InsertJobRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Bigquery_V2_InsertJobRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Bigquery_V2_Job` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func insertJob<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_InsertJobRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Bigquery_V2_InsertJobRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Bigquery_V2_Job>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_V2_Job>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "DeleteJob" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Requests the deletion of the metadata of a job. This call returns when the
        /// > job's metadata is deleted.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Bigquery_V2_DeleteJobRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Bigquery_V2_DeleteJobRequest` messages.
        ///   - deserializer: A deserializer for `SwiftProtobuf.Google_Protobuf_Empty` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func deleteJob<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_DeleteJobRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Bigquery_V2_DeleteJobRequest>,
            deserializer: some GRPCCore.MessageDeserializer<SwiftProtobuf.Google_Protobuf_Empty>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "ListJobs" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Lists all jobs that you started in the specified project. Job information
        /// > is available for a six month period after creation. The job list is sorted
        /// > in reverse chronological order, by job creation time. Requires the Can View
        /// > project role, or the Is Owner project role if you set the allUsers
        /// > property.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Bigquery_V2_ListJobsRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Bigquery_V2_ListJobsRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Bigquery_V2_JobList` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func listJobs<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_ListJobsRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Bigquery_V2_ListJobsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Bigquery_V2_JobList>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_V2_JobList>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetQueryResults" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > RPC to get the results of a query job.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Bigquery_V2_GetQueryResultsRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Bigquery_V2_GetQueryResultsRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Bigquery_V2_GetQueryResultsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getQueryResults<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_GetQueryResultsRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Bigquery_V2_GetQueryResultsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Bigquery_V2_GetQueryResultsResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_V2_GetQueryResultsResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "Query" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Runs a BigQuery SQL query synchronously and returns query results if the
        /// > query completes within a specified timeout.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Bigquery_V2_PostQueryRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Bigquery_V2_PostQueryRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Bigquery_V2_QueryResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func query<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_PostQueryRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Bigquery_V2_PostQueryRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Bigquery_V2_QueryResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_V2_QueryResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable
    }

    /// Generated client for the "google.cloud.bigquery.v2.JobService" service.
    ///
    /// The ``Client`` provides an implementation of ``ClientProtocol`` which wraps
    /// a `GRPCCore.GRPCCClient`. The underlying `GRPCClient` provides the long-lived
    /// means of communication with the remote peer.
    package struct Client: ClientProtocol {
        private let client: GRPCCore.GRPCClient

        /// Creates a new client wrapping the provided `GRPCCore.GRPCClient`.
        ///
        /// - Parameters:
        ///   - client: A `GRPCCore.GRPCClient` providing a communication channel to the service.
        package init(wrapping client: GRPCCore.GRPCClient) {
            self.client = client
        }

        /// Call the "CancelJob" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Requests that a job be cancelled. This call will return immediately, and
        /// > the client will need to poll for the job status to see if the cancel
        /// > completed successfully. Cancelled jobs may still incur costs.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Bigquery_V2_CancelJobRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Bigquery_V2_CancelJobRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Bigquery_V2_JobCancelResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func cancelJob<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_CancelJobRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Bigquery_V2_CancelJobRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Bigquery_V2_JobCancelResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_V2_JobCancelResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Bigquery_V2_JobService.Method.CancelJob.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetJob" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Returns information about a specific job. Job information is available for
        /// > a six month period after creation. Requires that you're the person who ran
        /// > the job, or have the Is Owner project role.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Bigquery_V2_GetJobRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Bigquery_V2_GetJobRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Bigquery_V2_Job` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func getJob<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_GetJobRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Bigquery_V2_GetJobRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Bigquery_V2_Job>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_V2_Job>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Bigquery_V2_JobService.Method.GetJob.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "InsertJob" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Starts a new asynchronous job.
        /// > 
        /// > This API has two different kinds of endpoint URIs, as this method supports
        /// > a variety of use cases.
        /// > 
        /// > * The *Metadata* URI is used for most interactions, as it accepts the job
        /// >   configuration directly.
        /// > * The *Upload* URI is ONLY for the case when you're sending both a load job
        /// >   configuration and a data stream together.  In this case, the Upload URI
        /// >   accepts the job configuration and the data as two distinct multipart MIME
        /// >   parts.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Bigquery_V2_InsertJobRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Bigquery_V2_InsertJobRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Bigquery_V2_Job` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func insertJob<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_InsertJobRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Bigquery_V2_InsertJobRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Bigquery_V2_Job>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_V2_Job>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Bigquery_V2_JobService.Method.InsertJob.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "DeleteJob" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Requests the deletion of the metadata of a job. This call returns when the
        /// > job's metadata is deleted.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Bigquery_V2_DeleteJobRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Bigquery_V2_DeleteJobRequest` messages.
        ///   - deserializer: A deserializer for `SwiftProtobuf.Google_Protobuf_Empty` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func deleteJob<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_DeleteJobRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Bigquery_V2_DeleteJobRequest>,
            deserializer: some GRPCCore.MessageDeserializer<SwiftProtobuf.Google_Protobuf_Empty>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Bigquery_V2_JobService.Method.DeleteJob.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "ListJobs" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Lists all jobs that you started in the specified project. Job information
        /// > is available for a six month period after creation. The job list is sorted
        /// > in reverse chronological order, by job creation time. Requires the Can View
        /// > project role, or the Is Owner project role if you set the allUsers
        /// > property.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Bigquery_V2_ListJobsRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Bigquery_V2_ListJobsRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Bigquery_V2_JobList` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func listJobs<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_ListJobsRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Bigquery_V2_ListJobsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Bigquery_V2_JobList>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_V2_JobList>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Bigquery_V2_JobService.Method.ListJobs.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetQueryResults" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > RPC to get the results of a query job.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Bigquery_V2_GetQueryResultsRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Bigquery_V2_GetQueryResultsRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Bigquery_V2_GetQueryResultsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func getQueryResults<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_GetQueryResultsRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Bigquery_V2_GetQueryResultsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Bigquery_V2_GetQueryResultsResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_V2_GetQueryResultsResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Bigquery_V2_JobService.Method.GetQueryResults.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "Query" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Runs a BigQuery SQL query synchronously and returns query results if the
        /// > query completes within a specified timeout.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Cloud_Bigquery_V2_PostQueryRequest` message.
        ///   - serializer: A serializer for `Google_Cloud_Bigquery_V2_PostQueryRequest` messages.
        ///   - deserializer: A deserializer for `Google_Cloud_Bigquery_V2_QueryResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        package func query<Result>(
            request: GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_PostQueryRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Cloud_Bigquery_V2_PostQueryRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Cloud_Bigquery_V2_QueryResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_V2_QueryResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Cloud_Bigquery_V2_JobService.Method.Query.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }
    }
}

// Helpers providing default arguments to 'ClientProtocol' methods.
extension Google_Cloud_Bigquery_V2_JobService.ClientProtocol {
    /// Call the "CancelJob" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Requests that a job be cancelled. This call will return immediately, and
    /// > the client will need to poll for the job status to see if the cancel
    /// > completed successfully. Cancelled jobs may still incur costs.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Bigquery_V2_CancelJobRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func cancelJob<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_CancelJobRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_V2_JobCancelResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.cancelJob(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Bigquery_V2_CancelJobRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Bigquery_V2_JobCancelResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetJob" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Returns information about a specific job. Job information is available for
    /// > a six month period after creation. Requires that you're the person who ran
    /// > the job, or have the Is Owner project role.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Bigquery_V2_GetJobRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func getJob<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_GetJobRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_V2_Job>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getJob(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Bigquery_V2_GetJobRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Bigquery_V2_Job>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "InsertJob" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Starts a new asynchronous job.
    /// > 
    /// > This API has two different kinds of endpoint URIs, as this method supports
    /// > a variety of use cases.
    /// > 
    /// > * The *Metadata* URI is used for most interactions, as it accepts the job
    /// >   configuration directly.
    /// > * The *Upload* URI is ONLY for the case when you're sending both a load job
    /// >   configuration and a data stream together.  In this case, the Upload URI
    /// >   accepts the job configuration and the data as two distinct multipart MIME
    /// >   parts.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Bigquery_V2_InsertJobRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func insertJob<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_InsertJobRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_V2_Job>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.insertJob(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Bigquery_V2_InsertJobRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Bigquery_V2_Job>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DeleteJob" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Requests the deletion of the metadata of a job. This call returns when the
    /// > job's metadata is deleted.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Bigquery_V2_DeleteJobRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func deleteJob<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_DeleteJobRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.deleteJob(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Bigquery_V2_DeleteJobRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListJobs" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Lists all jobs that you started in the specified project. Job information
    /// > is available for a six month period after creation. The job list is sorted
    /// > in reverse chronological order, by job creation time. Requires the Can View
    /// > project role, or the Is Owner project role if you set the allUsers
    /// > property.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Bigquery_V2_ListJobsRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func listJobs<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_ListJobsRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_V2_JobList>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.listJobs(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Bigquery_V2_ListJobsRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Bigquery_V2_JobList>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetQueryResults" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > RPC to get the results of a query job.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Bigquery_V2_GetQueryResultsRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func getQueryResults<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_GetQueryResultsRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_V2_GetQueryResultsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getQueryResults(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Bigquery_V2_GetQueryResultsRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Bigquery_V2_GetQueryResultsResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Query" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Runs a BigQuery SQL query synchronously and returns query results if the
    /// > query completes within a specified timeout.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Cloud_Bigquery_V2_PostQueryRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func query<Result>(
        request: GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_PostQueryRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_V2_QueryResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.query(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Cloud_Bigquery_V2_PostQueryRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Cloud_Bigquery_V2_QueryResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }
}

// Helpers providing sugared APIs for 'ClientProtocol' methods.
extension Google_Cloud_Bigquery_V2_JobService.ClientProtocol {
    /// Call the "CancelJob" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Requests that a job be cancelled. This call will return immediately, and
    /// > the client will need to poll for the job status to see if the cancel
    /// > completed successfully. Cancelled jobs may still incur costs.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func cancelJob<Result>(
        _ message: Google_Cloud_Bigquery_V2_CancelJobRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_V2_JobCancelResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_CancelJobRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.cancelJob(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetJob" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Returns information about a specific job. Job information is available for
    /// > a six month period after creation. Requires that you're the person who ran
    /// > the job, or have the Is Owner project role.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func getJob<Result>(
        _ message: Google_Cloud_Bigquery_V2_GetJobRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_V2_Job>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_GetJobRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getJob(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "InsertJob" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Starts a new asynchronous job.
    /// > 
    /// > This API has two different kinds of endpoint URIs, as this method supports
    /// > a variety of use cases.
    /// > 
    /// > * The *Metadata* URI is used for most interactions, as it accepts the job
    /// >   configuration directly.
    /// > * The *Upload* URI is ONLY for the case when you're sending both a load job
    /// >   configuration and a data stream together.  In this case, the Upload URI
    /// >   accepts the job configuration and the data as two distinct multipart MIME
    /// >   parts.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func insertJob<Result>(
        _ message: Google_Cloud_Bigquery_V2_InsertJobRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_V2_Job>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_InsertJobRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.insertJob(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DeleteJob" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Requests the deletion of the metadata of a job. This call returns when the
    /// > job's metadata is deleted.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func deleteJob<Result>(
        _ message: Google_Cloud_Bigquery_V2_DeleteJobRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_DeleteJobRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.deleteJob(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListJobs" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Lists all jobs that you started in the specified project. Job information
    /// > is available for a six month period after creation. The job list is sorted
    /// > in reverse chronological order, by job creation time. Requires the Can View
    /// > project role, or the Is Owner project role if you set the allUsers
    /// > property.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func listJobs<Result>(
        _ message: Google_Cloud_Bigquery_V2_ListJobsRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_V2_JobList>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_ListJobsRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.listJobs(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetQueryResults" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > RPC to get the results of a query job.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func getQueryResults<Result>(
        _ message: Google_Cloud_Bigquery_V2_GetQueryResultsRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_V2_GetQueryResultsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_GetQueryResultsRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getQueryResults(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Query" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Runs a BigQuery SQL query synchronously and returns query results if the
    /// > query completes within a specified timeout.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    package func query<Result>(
        _ message: Google_Cloud_Bigquery_V2_PostQueryRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Cloud_Bigquery_V2_QueryResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Cloud_Bigquery_V2_PostQueryRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.query(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }
}